plugins {
  id 'com.github.blindpirate.gogradle' version '0.11.4'
}

sonarqube {
  properties {
    property 'sonar.sources', '.'
    property 'sonar.inclusions', '**/*.go'
    property 'sonar.exclusions', '**/render.go,**/generate_source.go,**/*_generated.go,**/build/**,**/vendor/**,**/.gogradle/**'
    property 'sonar.tests', '.'
    property 'sonar.test.inclusions', '**/*_test.go'
    property 'sonar.test.exclusions', '**/build/**,**/vendor/**,**/.gogradle/**'
    property 'sonar.go.tests.reportPaths', "${project.projectDir}/.gogradle/reports/test-report.out"
    property 'sonar.go.coverage.reportPaths', "${project.projectDir}/.gogradle/reports/coverage/profiles/github.com%2FSonarSource%2Fslang%2Fsonar-go-to-slang.out"
  }
}

golang {
  packagePath = 'github.com/SonarSource/slang/sonar-go-to-slang'
  goVersion = '1.14.6'
}

task generateSource(type: com.github.blindpirate.gogradle.Go) {
    go 'run generate_source.go'
}

task generateTestReport(type: com.github.blindpirate.gogradle.Go) {
  go ('test -json') {
    stdout writeTo('.gogradle/reports/test-report.out')
  }
}

installDependencies.dependsOn generateSource
clean.dependsOn goClean
test.dependsOn goCheck
build.dependsOn goBuild
goBuild.dependsOn generateTestReport
generateTestReport.dependsOn goTest

goBuild {
  targetPlatform = ['linux-amd64', 'windows-amd64', 'darwin-amd64']
  outputLocation = './build/sonar-go-to-slang-${GOOS}-${GOARCH}${GOEXE}'
}

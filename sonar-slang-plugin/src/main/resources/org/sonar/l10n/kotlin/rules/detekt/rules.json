[
  {
    "key": "ClassNaming",
    "name": "Class Naming",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "A classes name should fit the naming pattern defined in the projects configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#classnaming",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CollapsibleIfStatements",
    "name": "Collapsible If Statements",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Two if statements which could be collapsed were detected. These statements can be merged to improve readability.",
    "url": "https://arturbosch.github.io/detekt/style.html#collapsibleifstatements",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CommentOverPrivateFunction",
    "name": "Comment Over Private Function",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Comments for private functions should be avoided. Prefer giving the function an expressive name. Split it up in smaller, self-explaining functions if necessary.",
    "url": "https://arturbosch.github.io/detekt/comments.html#commentoverprivatefunction",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "CommentOverPrivateProperty",
    "name": "Comment Over Private Property",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Private properties should be named such that they explain themselves even without a comment.",
    "url": "https://arturbosch.github.io/detekt/comments.html#commentoverprivateproperty",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ComplexCondition",
    "name": "Complex Condition",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Complex conditions should be simplified and extracted into well-named methods if necessary.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#complexcondition",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ComplexInterface",
    "name": "Complex Interface",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "An interface contains too many functions and properties. Large classes tend to handle many things at once. An interface should have one responsibility. Split up large interfaces into smaller ones that are easier to understand.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#complexinterface",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ComplexMethod",
    "name": "Complex Method",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Prefer splitting up complex methods into smaller, easier to understand methods.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#complexmethod",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "DataClassContainsFunctions",
    "name": "Data Class Contains Functions",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Data classes should mainly be used to store data and should not have any extra functions. (Compiler will automatically generate equals, toString and hashCode functions)",
    "url": "https://arturbosch.github.io/detekt/style.html#dataclasscontainsfunctions",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "DuplicateCaseInWhenExpression",
    "name": "Duplicate Case In When Expression",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Duplicated case statements in when expression. Both cases should be merged.",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#duplicatecaseinwhenexpression",
    "tags": [
      "warning"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "EmptyCatchBlock",
    "name": "Empty Catch Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptycatchblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyClassBlock",
    "name": "Empty Class Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptyclassblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyDefaultConstructor",
    "name": "Empty Default Constructor",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptydefaultconstructor",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyDoWhileBlock",
    "name": "Empty Do While Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptydowhileblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyElseBlock",
    "name": "Empty Else Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptyelseblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyFinallyBlock",
    "name": "Empty Finally Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptyfinallyblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyForBlock",
    "name": "Empty For Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptyforblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyFunctionBlock",
    "name": "Empty Function Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptyfunctionblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyIfBlock",
    "name": "Empty If Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptyifblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyInitBlock",
    "name": "Empty Init Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptyinitblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyKtFile",
    "name": "Empty Kt File",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptyktfile",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptySecondaryConstructor",
    "name": "Empty Secondary Constructor",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptysecondaryconstructor",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyWhenBlock",
    "name": "Empty When Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptywhenblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EmptyWhileBlock",
    "name": "Empty While Block",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Empty block of code detected. As they serve no purpose they should be removed.",
    "url": "https://arturbosch.github.io/detekt/empty-blocks.html#emptywhileblock",
    "tags": [
      "minor"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EndOfSentenceFormat",
    "name": "End Of Sentence Format",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The first sentence in a KDoc comment should end with correct punctuation.",
    "url": "https://arturbosch.github.io/detekt/comments.html#endofsentenceformat",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EnumNaming",
    "name": "Enum Naming",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Enum names should follow the naming convention set in the projects configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#enumnaming",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EqualsAlwaysReturnsTrueOrFalse",
    "name": "Equals Always Returns True Or False",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Having an equals method which always returns true or false is not a good idea. It does not follow the contract of this method. Consider a good default implementation. For example this \u003d\u003d other",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#equalsalwaysreturnstrueorfalse",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "EqualsNullCall",
    "name": "Equals Null Call",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Equals() method is called with null as parameter. Consider using \u003d\u003d to compare to null.",
    "url": "https://arturbosch.github.io/detekt/style.html#equalsnullcall",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EqualsWithHashCodeExist",
    "name": "Equals With Hash Code Exist",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Always override hashCode when you override equals. All hash-based collections depend on objects meeting the equals-contract. Two equal objects must produce the same hashcode. When inheriting equals or hashcode, override the inherited and call the super method for clarification.",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#equalswithhashcodeexist",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ExceptionRaisedInUnexpectedLocation",
    "name": "Exception Raised In Unexpected Location",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This method is not expected to throw exceptions. This can cause weird behavior.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#exceptionraisedinunexpectedlocation",
    "tags": [
      "codesmell"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ExplicitGarbageCollectionCall",
    "name": "Explicit Garbage Collection Call",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Don\u0027t try to be smarter than the JVM. Your code should work independently if the garbage collector is disabled or not. If you face memory issues, try tuning the JVM options instead of relying on code itself.",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#explicitgarbagecollectioncall",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ExpressionBodySyntax",
    "name": "Expression Body Syntax",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Functions with exact one statement, the return statement, can be rewritten with ExpressionBodySyntax.",
    "url": "https://arturbosch.github.io/detekt/style.html#expressionbodysyntax",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ForEachOnRange",
    "name": "For Each On Range",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Using the forEach method on ranges has a heavy performance cost. Prefer using simple for loops.",
    "url": "https://arturbosch.github.io/detekt/performance.html#foreachonrange",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ForbiddenClassName",
    "name": "Forbidden Class Name",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Forbidden class name as per configuration detected.",
    "url": "https://arturbosch.github.io/detekt/naming.html#forbiddenclassname",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ForbiddenComment",
    "name": "Forbidden Comment",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Flags a forbidden comment. Defaults values are TODO:, FIXME: or STOPSHIP:",
    "url": "https://arturbosch.github.io/detekt/style.html#forbiddencomment",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "ForbiddenImport",
    "name": "Forbidden Import",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Mark forbidden imports. A forbidden import could be an import for an unstable / experimental apiand hence you might want to mark it as forbidden in order to get warned about the usage.",
    "url": "https://arturbosch.github.io/detekt/style.html#forbiddenimport",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "FunctionMaxLength",
    "name": "Function Max Length",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Function names should not be longer than the maximum set in the project configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#functionmaxlength",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FunctionMinLength",
    "name": "Function Min Length",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Function names should not be shorter than the minimum defined in the configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#functionminlength",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FunctionNaming",
    "name": "Function Naming",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Function names should follow the naming convention set in the configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#functionnaming",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FunctionOnlyReturningConstant",
    "name": "Function Only Returning Constant",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "A function that only returns a constant is misleading. Consider declaring a constant instead",
    "url": "https://arturbosch.github.io/detekt/style.html#functiononlyreturningconstant",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "InstanceOfCheckForException",
    "name": "Instance Of Check For Exception",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Instead of checking for a general exception type and checking for a specific exception type use multiple catch blocks.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#instanceofcheckforexception",
    "tags": [
      "codesmell"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "InvalidRange",
    "name": "Invalid Range",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "If a for loops condition is false before the first iteration, the loop will never get executed.",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#invalidrange",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "IteratorHasNextCallsNextMethod",
    "name": "Iterator Has Next Calls Next Method",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "The hasNext() method of an Iterator implementation should not call the next() method. The state of the iterator should not be changed inside the hasNext() method. The hasNext() method is not supposed to have any side effects.",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#iteratorhasnextcallsnextmethod",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "IteratorNotThrowingNoSuchElementException",
    "name": "Iterator Not Throwing No Such Element Exception",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "The next() method of an Iterator implementation should throw a NoSuchElementException when there are no more elements to return",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#iteratornotthrowingnosuchelementexception",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "LabeledExpression",
    "name": "Labeled Expression",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Expression with labels increase complexity and affect maintainability.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#labeledexpression",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "LargeClass",
    "name": "Large Class",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "One class should have one responsibility. Large classes tend to handle many things at once. Split up large classes into smaller classes that are easier to understand.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#largeclass",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "LateinitUsage",
    "name": "Lateinit Usage",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Usage of lateinit detected. Using lateinit for property initialization is error prone, try using constructor injection or delegation.",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#lateinitusage",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "LongMethod",
    "name": "Long Method",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "One method should have one responsibility. Long methods tend to handle many things at once. Prefer smaller methods to make them easier to understand.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#longmethod",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "LongParameterList",
    "name": "Long Parameter List",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The more parameters a method has the more complex it is. Long parameter lists are often used to control complex algorithms and violate the Single Responsibility Principle. Prefer methods with short parameter lists.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#longparameterlist",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "LoopWithTooManyJumpStatements",
    "name": "Loop With Too Many Jump Statements",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "The loop contains more than one break or continue statement. The code should be refactored to increase readability.",
    "url": "https://arturbosch.github.io/detekt/style.html#loopwithtoomanyjumpstatements",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "MagicNumber",
    "name": "Magic Number",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Report magic numbers. Magic number is a numeric literal that is not defined as a constant and hence it\u0027s unclear what the purpose of this number is. It\u0027s better to declare such numbers as constants and give them a proper name. By default, -1, 0, 1, and 2 are not considered to be magic numbers.",
    "url": "https://arturbosch.github.io/detekt/style.html#magicnumber",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "MandatoryBracesIfStatements",
    "name": "Mandatory Braces If Statements",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Multi-line if statement was found that does not have braces. These should be added to improve readability.",
    "url": "https://arturbosch.github.io/detekt/style.html#mandatorybracesifstatements",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MatchingDeclarationName",
    "name": "Matching Declaration Name",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "If a source file contains only a single non-private top-level class or object, the file name should reflect the case-sensitive name plus the .kt extension.",
    "url": "https://arturbosch.github.io/detekt/naming.html#matchingdeclarationname",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MaxLineLength",
    "name": "Max Line Length",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Line detected that is longer than the defined maximum line length in the code style.",
    "url": "https://arturbosch.github.io/detekt/style.html#maxlinelength",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MayBeConst",
    "name": "May Be Const",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Reports vals that can be const val instead.",
    "url": "https://arturbosch.github.io/detekt/style.html#maybeconst",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MemberNameEqualsClassName",
    "name": "Member Name Equals Class Name",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "A member should not given the same name as its parent class or object.",
    "url": "https://arturbosch.github.io/detekt/naming.html#membernameequalsclassname",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MethodOverloading",
    "name": "Method Overloading",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Methods which are overloaded often might be harder to maintain. Furthermore, these methods are tightly coupled. Refactor these methods and try to use optional parameters.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#methodoverloading",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ModifierOrder",
    "name": "Modifier Order",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Modifiers are not in the correct order.",
    "url": "https://arturbosch.github.io/detekt/style.html#modifierorder",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NestedBlockDepth",
    "name": "Nested Block Depth",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Excessive nesting leads to hidden complexity. Prefer extracting code to make it easier to understand.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#nestedblockdepth",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "NestedClassesVisibility",
    "name": "Nested Classes Visibility",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Nested types are often used for implementing private functionality and therefore this should not be public.",
    "url": "https://arturbosch.github.io/detekt/style.html#nestedclassesvisibility",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NewLineAtEndOfFile",
    "name": "New Line At End Of File",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks whether files end with a line separator.",
    "url": "https://arturbosch.github.io/detekt/style.html#newlineatendoffile",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NoTabs",
    "name": "No Tabs",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks if tabs are used in Kotlin files.",
    "url": "https://arturbosch.github.io/detekt/style.html#notabs",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NotImplementedDeclaration",
    "name": "Not Implemented Declaration",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The NotImplementedDeclaration should only be used when a method stub is necessary. This defers the development of the functionality of this function. Hence, the NotImplementedDeclaration should only serve as a temporary declaration. Before releasing, this type of declaration should be removed.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#notimplementeddeclaration",
    "tags": [
      "codesmell"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ObjectPropertyNaming",
    "name": "Object Property Naming",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Property names inside objects should follow the naming convention set in the projects configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#objectpropertynaming",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "OptionalAbstractKeyword",
    "name": "Optional Abstract Keyword",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Unnecessary abstract modifier in interface",
    "url": "https://arturbosch.github.io/detekt/style.html#optionalabstractkeyword",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "OptionalUnit",
    "name": "Optional Unit",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Return type of \u0027Unit\u0027 is unnecessary and can be safely removed.",
    "url": "https://arturbosch.github.io/detekt/style.html#optionalunit",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "OptionalWhenBraces",
    "name": "Optional When Braces",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Optional braces in when expression",
    "url": "https://arturbosch.github.io/detekt/style.html#optionalwhenbraces",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PackageNaming",
    "name": "Package Naming",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Package names should match the naming convention set in the configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#packagenaming",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PreferToOverPairSyntax",
    "name": "Prefer To Over Pair Syntax",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Pair was created using the Pair constructor, using the to syntax is preferred.",
    "url": "https://arturbosch.github.io/detekt/style.html#prefertooverpairsyntax",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PrintStackTrace",
    "name": "Print Stack Trace",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not print an stack trace. These debug statements should be replaced with a logger or removed.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#printstacktrace",
    "tags": [
      "codesmell"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ProtectedMemberInFinalClass",
    "name": "Protected Member In Final Class",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Member with protected visibility in final class is private. Consider using private or internal as modifier.",
    "url": "https://arturbosch.github.io/detekt/style.html#protectedmemberinfinalclass",
    "tags": [
      "warning"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RedundantVisibilityModifierRule",
    "name": "Redundant Visibility Modifier Rule",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks for redundant visibility modifiers. Public is the default visibility for classes. The public modifier is redundant.",
    "url": "https://arturbosch.github.io/detekt/style.html#redundantvisibilitymodifierrule",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RethrowCaughtException",
    "name": "Rethrow Caught Exception",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Do not rethrow a caught exception of the same type.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#rethrowcaughtexception",
    "tags": [
      "codesmell"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ReturnCount",
    "name": "Return Count",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Restrict the number of return statements in methods.",
    "url": "https://arturbosch.github.io/detekt/style.html#returncount",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "ReturnFromFinally",
    "name": "Return From Finally",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Do not return within a finally statement. This can discard exceptions.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#returnfromfinally",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "SafeCast",
    "name": "Safe Cast",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Safe cast instead of if-else-null",
    "url": "https://arturbosch.github.io/detekt/style.html#safecast",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SerialVersionUIDInSerializableClass",
    "name": "Serial Version UIDIn Serializable Class",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "A class which implements the Serializable interface does not define a correct serialVersionUID field. The serialVersionUID field should be a constant long value inside a companion object.",
    "url": "https://arturbosch.github.io/detekt/style.html#serialversionuidinserializableclass",
    "tags": [
      "warning"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SpacingBetweenPackageAndImports",
    "name": "Spacing Between Package And Imports",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Violation of the package declaration style.",
    "url": "https://arturbosch.github.io/detekt/style.html#spacingbetweenpackageandimports",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SpreadOperator",
    "name": "Spread Operator",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Using a spread operator causes a full copy of the array to be created before calling a method has a very high performance penalty.",
    "url": "https://arturbosch.github.io/detekt/performance.html#spreadoperator",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "StringLiteralDuplication",
    "name": "String Literal Duplication",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Multiple occurrences of the same string literal within a single file detected.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#stringliteralduplication",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SwallowedException",
    "name": "Swallowed Exception",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The caught exception is swallowed. The original exception could be lost.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#swallowedexception",
    "tags": [
      "codesmell"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ThrowingExceptionFromFinally",
    "name": "Throwing Exception From Finally",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Do not throw an exception within a finally statement. This can discard exceptions and is confusing.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#throwingexceptionfromfinally",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ThrowingExceptionInMain",
    "name": "Throwing Exception In Main",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The main method should not throw an exception.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#throwingexceptioninmain",
    "tags": [
      "codesmell"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "ThrowingExceptionsWithoutMessageOrCause",
    "name": "Throwing Exceptions Without Message Or Cause",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "A call to the default constructor of an exception was detected. Instead one of the constructor overloads should be called. This allows to provide more meaningful exceptions.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#throwingexceptionswithoutmessageorcause",
    "tags": [
      "warning"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ThrowingNewInstanceOfSameException",
    "name": "Throwing New Instance Of Same Exception",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Avoid catch blocks that rethrow a caught exception wrapped inside a new instance of the same exception.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#throwingnewinstanceofsameexception",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ThrowsCount",
    "name": "Throws Count",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Restrict the number of throw statements in methods.",
    "url": "https://arturbosch.github.io/detekt/style.html#throwscount",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "TooGenericExceptionCaught",
    "name": "Too Generic Exception Caught",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Caught exception is too generic. Prefer catching specific exceptions to the case that is currently handled.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#toogenericexceptioncaught",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "TooGenericExceptionThrown",
    "name": "Too Generic Exception Thrown",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Thrown exception is too generic. Prefer throwing project specific exceptions to handle error cases.",
    "url": "https://arturbosch.github.io/detekt/exceptions.html#toogenericexceptionthrown",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "TooManyFunctions",
    "name": "Too Many Functions",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Too many functions inside a/an file/class/object/interface always indicate a violation of the single responsibility principle. Maybe the file/class/object/interface wants to manage to many things at once. Extract functionality which clearly belongs together.",
    "url": "https://arturbosch.github.io/detekt/complexity.html#toomanyfunctions",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "TopLevelPropertyNaming",
    "name": "Top Level Property Naming",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Top level constant names should follow the naming convention set in the projects configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#toplevelpropertynaming",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TrailingWhitespace",
    "name": "Trailing Whitespace",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Checks which lines end with a whitespace.",
    "url": "https://arturbosch.github.io/detekt/style.html#trailingwhitespace",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnconditionalJumpStatementInLoop",
    "name": "Unconditional Jump Statement In Loop",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "An unconditional jump statement in a loop is useless. The loop itself is only executed once.",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#unconditionaljumpstatementinloop",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "UndocumentedPublicClass",
    "name": "Undocumented Public Class",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Public classes, interfaces and objects require documentation.",
    "url": "https://arturbosch.github.io/detekt/comments.html#undocumentedpublicclass",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "UndocumentedPublicFunction",
    "name": "Undocumented Public Function",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Public functions require documentation.",
    "url": "https://arturbosch.github.io/detekt/comments.html#undocumentedpublicfunction",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "UnnecessaryAbstractClass",
    "name": "Unnecessary Abstract Class",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "An abstract class is unnecessary and can be refactored. An abstract class should have both abstract and concrete properties or functions. An abstract class without a concrete member can be refactored to an interface. An abstract class without an abstract member can be refactored to a concrete class.",
    "url": "https://arturbosch.github.io/detekt/style.html#unnecessaryabstractclass",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnnecessaryInheritance",
    "name": "Unnecessary Inheritance",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "The extended super type is unnecessary.",
    "url": "https://arturbosch.github.io/detekt/style.html#unnecessaryinheritance",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnnecessaryParentheses",
    "name": "Unnecessary Parentheses",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Unnecessary parentheses don\u0027t add any value to the code and should be removed.",
    "url": "https://arturbosch.github.io/detekt/style.html#unnecessaryparentheses",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnnecessaryTemporaryInstantiation",
    "name": "Unnecessary Temporary Instantiation",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Avoid temporary objects when converting primitive types to String.",
    "url": "https://arturbosch.github.io/detekt/performance.html#unnecessarytemporaryinstantiation",
    "tags": [
      "performance"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnreachableCode",
    "name": "Unreachable Code",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Unreachable code detected. This code should be removed",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#unreachablecode",
    "tags": [
      "warning"
    ],
    "constantDebtMinutes": 10
  },
  {
    "key": "UnsafeCallOnNullableType",
    "name": "Unsafe Call On Nullable Type",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "It will throw a NullPointerException at runtime if your nullable value is null.",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#unsafecallonnullabletype",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "UnsafeCast",
    "name": "Unsafe Cast",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Cast operator throws an exception if the cast is not possible.",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#unsafecast",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "UntilInsteadOfRangeTo",
    "name": "Until Instead Of Range To",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "\u0027..\u0027 call can be replaced with \u0027until\u0027",
    "url": "https://arturbosch.github.io/detekt/style.html#untilinsteadofrangeto",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnusedImports",
    "name": "Unused Imports",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Unused Imports are dead code and should be removed.",
    "url": "https://arturbosch.github.io/detekt/style.html#unusedimports",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnusedPrivateMember",
    "name": "Unused Private Member",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Private member is unused.",
    "url": "https://arturbosch.github.io/detekt/style.html#unusedprivatemember",
    "tags": [
      "maintainability"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UseDataClass",
    "name": "Use Data Class",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Classes that do nothing but hold data should be replaced with a data class.",
    "url": "https://arturbosch.github.io/detekt/style.html#usedataclass",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UselessPostfixExpression",
    "name": "Useless Postfix Expression",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "The incremented or decremented value is unused. This value is replaced with the original value.",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#uselesspostfixexpression",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 20
  },
  {
    "key": "UtilityClassWithPublicConstructor",
    "name": "Utility Class With Public Constructor",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "The class declaration is unnecessary because it only contains utility functions. An object declaration should be used instead.",
    "url": "https://arturbosch.github.io/detekt/style.html#utilityclasswithpublicconstructor",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "VariableMaxLength",
    "name": "Variable Max Length",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Variable names should not be longer than the maximum set in the configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#variablemaxlength",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "VariableMinLength",
    "name": "Variable Min Length",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Variable names should not be shorter than the minimum defined in the configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#variableminlength",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "VariableNaming",
    "name": "Variable Naming",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Variable names should follow the naming convention set in the projects configuration.",
    "url": "https://arturbosch.github.io/detekt/naming.html#variablenaming",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WildcardImport",
    "name": "Wildcard Import",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Wildcard imports should be replaced with imports using fully qualified class names. Wildcard imports can lead to naming conflicts. A library update can introduce naming clashes with your classes which results in compilation errors.",
    "url": "https://arturbosch.github.io/detekt/style.html#wildcardimport",
    "tags": [
      "style"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WrongEqualsTypeParameter",
    "name": "Wrong Equals Type Parameter",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Wrong parameter type for equals() method found. To correctly override the equals() method use Any?",
    "url": "https://arturbosch.github.io/detekt/potential-bugs.html#wrongequalstypeparameter",
    "tags": [
      "defect"
    ],
    "constantDebtMinutes": 10
  }
]

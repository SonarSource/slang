[
  {
    "key": "AaptCrash",
    "name": "Potential AAPT crash",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Defining a style which sets android:id to a dynamically generated id can cause\u003cbr /\u003e\nmany versions of aapt, the resource packaging tool, to crash. To work around\u003cbr /\u003e\nthis, declare the id explicitly with \u0026lt;item type\u003d\u0026quot;id\u0026quot; name\u003d\u0026quot;...\u0026quot; /\u0026gt; instead.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://code.google.com/p/android/issues/detail?id\u003d20479\"\u003ehttps://code.google.com/p/android/issues/detail?id\u003d20479\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AccidentalOctal",
    "name": "Accidental Octal",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "In Groovy, an integer literal that starts with a leading 0 will be interpreted\u003cbr /\u003e\nas an octal number. That is usually (always?) an accident and can lead to\u003cbr /\u003e\nsubtle bugs, for example when used in the versionCode of an app.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AdapterViewChildren",
    "name": "AdapterViews cannot have children in XML",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "AdapterViews such as ListViews must be configured with data from Java code,\u003cbr /\u003e\nsuch as a ListAdapter.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/reference/android/widget/AdapterView.html\"\u003ehttp://developer.android.com/reference/android/widget/AdapterView.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AddJavascriptInterface",
    "name": "addJavascriptInterface Called",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "For applications built for API levels below 17, WebView#addJavascriptInterface\u003cbr /\u003e\npresents a security hazard as JavaScript on the target web page has the\u003cbr /\u003e\nability to use reflection to access the injected object\u0027s public fields and\u003cbr /\u003e\nthus manipulate the host application in unintended ways.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/\"\u003ehttps://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AllCaps",
    "name": "Combining textAllCaps and markup",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The textAllCaps text transform will end up calling toString on the\u003cbr /\u003e\nCharSequence, which has the net effect of removing any markup such as \u0026lt;b\u0026gt;.\u003cbr /\u003e\nThis check looks for usages of strings containing markup that also specify\u003cbr /\u003e\ntextAllCaps\u003dtrue.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AllowAllHostnameVerifier",
    "name": "Insecure HostnameVerifier",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check looks for use of HostnameVerifier implementations whose verify\u003cbr /\u003e\nmethod always returns true (thus trusting any hostname) which could result in\u003cbr /\u003e\ninsecure network traffic caused by trusting arbitrary hostnames in TLS/SSL\u003cbr /\u003e\ncertificates presented by peers.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AllowBackup",
    "name": "AllowBackup/FullBackupContent Problems",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The allowBackup attribute determines if an application\u0027s data can be backed up\u003cbr /\u003e\nand restored. It is documented at\u003cbr /\u003e\nhttp://developer.android.com/reference/android/R.attr.html#allowBackup\u003cbr /\u003e\n\u003cbr /\u003e\nBy default, this flag is set to true. When this flag is set to true,\u003cbr /\u003e\napplication data can be backed up and restored by the user using adb backup\u003cbr /\u003e\nand adb restore.\u003cbr /\u003e\n\u003cbr /\u003e\nThis may have security consequences for an application. adb backup allows\u003cbr /\u003e\nusers who have enabled USB debugging to copy application data off of the\u003cbr /\u003e\ndevice. Once backed up, all application data can be read by the user. adb\u003cbr /\u003e\nrestore allows creation of application data from a source specified by the\u003cbr /\u003e\nuser. Following a restore, applications should not assume that the data, file\u003cbr /\u003e\npermissions, and directory permissions were created by the application\u003cbr /\u003e\nitself.\u003cbr /\u003e\n\u003cbr /\u003e\nSetting allowBackup\u003d\u0026quot;false\u0026quot; opts an application out of both backup and\u003cbr /\u003e\nrestore.\u003cbr /\u003e\n\u003cbr /\u003e\nTo fix this warning, decide whether your application should support backup,\u003cbr /\u003e\nand explicitly set android:allowBackup\u003d(true|false)\u0026quot;.\u003cbr /\u003e\n\u003cbr /\u003e\nIf not set to false, and if targeting API 23 or later, lint will also warn\u003cbr /\u003e\nthat you should set android:fullBackupContent to configure auto backup.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/backup/autosyncapi.html\"\u003ehttps://developer.android.com/training/backup/autosyncapi.html\u003c/a\u003e\u003cbr /\u003e\nhttp://developer.android.com/reference/android/R.attr.html#allowBackup\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AlwaysShowAction",
    "name": "Usage of showAsAction\u003dalways",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Using showAsAction\u003d\u0026quot;always\u0026quot; in menu XML, or MenuItem.SHOW_AS_ACTION_ALWAYS in\u003cbr /\u003e\nJava code is usually a deviation from the user interface style guide.Use\u003cbr /\u003e\nifRoom or the corresponding MenuItem.SHOW_AS_ACTION_IF_ROOM instead.\u003cbr /\u003e\n\u003cbr /\u003e\nIf always is used sparingly there are usually no problems and behavior is\u003cbr /\u003e\nroughly equivalent to ifRoom but with preference over other ifRoom items.\u003cbr /\u003e\nUsing it more than twice in the same menu is a bad idea.\u003cbr /\u003e\n\u003cbr /\u003e\nThis check looks for menu XML files that contain more than two always actions,\u003cbr /\u003e\nor some always actions and no ifRoom actions. In Java code, it looks for\u003cbr /\u003e\nprojects that contain references to MenuItem.SHOW_AS_ACTION_ALWAYS and no\u003cbr /\u003e\nreferences to MenuItem.SHOW_AS_ACTION_IF_ROOM.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/design/patterns/actionbar.html\"\u003ehttp://developer.android.com/design/patterns/actionbar.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AnimatorKeep",
    "name": "Missing @Keep for Animated Properties",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When you use property animators, properties can be accessed via reflection.\u003cbr /\u003e\nThose methods should be annotated with @Keep to ensure that during release\u003cbr /\u003e\nbuilds, the methods are not potentially treated as unused and removed, or\u003cbr /\u003e\ntreated as internal only and get renamed to something shorter.\u003cbr /\u003e\n\u003cbr /\u003e\nThis check will also flag other potential reflection problems it encounters,\u003cbr /\u003e\nsuch as a missing property, wrong argument types, etc.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AppCompatCustomView",
    "name": "Appcompat Custom Widgets",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "In order to support features such as tinting, the appcompat library will\u003cbr /\u003e\nautomatically load special appcompat replacements for the builtin widgets.\u003cbr /\u003e\nHowever, this does not work for your own custom views.\u003cbr /\u003e\n\u003cbr /\u003e\nInstead of extending the android.widget classes directly, you should instead\u003cbr /\u003e\nextend one of the delegate classes in android.support.v7.widget.AppCompat.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AppCompatMethod",
    "name": "Using Wrong AppCompat Method",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When using the appcompat library, there are some methods you should be calling\u003cbr /\u003e\ninstead of the normal ones; for example, getSupportActionBar() instead of\u003cbr /\u003e\ngetActionBar(). This lint check looks for calls to the wrong method.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/tools/support-library/index.html\"\u003ehttp://developer.android.com/tools/support-library/index.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AppCompatResource",
    "name": "Menu namespace",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "When using the appcompat library, menu resources should refer to the\u003cbr /\u003e\nshowAsAction in the app: namespace, not the android: namespace.\u003cbr /\u003e\n\u003cbr /\u003e\nSimilarly, when not using the appcompat library, you should be using the\u003cbr /\u003e\nandroid:showAsAction attribute.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AppLinkUrlError",
    "name": "URL not supported by app for Firebase App Indexing",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Ensure the URL is supported by your app, to get installs and traffic to your\u003cbr /\u003e\napp from Google Search.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://g.co/AppIndexing/AndroidStudio\"\u003ehttps://g.co/AppIndexing/AndroidStudio\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AppLinksAutoVerifyError",
    "name": "App Links Auto Verification Failure",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable AppLinksAutoVerifyError\u003cbr /\u003e\n\u003cbr /\u003e\nEnsures that app links are correctly set and associated with website.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://g.co/appindexing/applinks\"\u003ehttps://g.co/appindexing/applinks\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AppLinksAutoVerifyWarning",
    "name": "Potential App Links Auto Verification Failure",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable AppLinksAutoVerifyWarning\u003cbr /\u003e\n\u003cbr /\u003e\nEnsures that app links are correctly set and associated with website.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://g.co/appindexing/applinks\"\u003ehttps://g.co/appindexing/applinks\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ApplySharedPref",
    "name": "Use apply() on SharedPreferences",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Consider using apply() instead of commit on shared preferences. Whereas commit\u003cbr /\u003e\nblocks and writes its data to persistent storage immediately, apply will\u003cbr /\u003e\nhandle it in the background.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Assert",
    "name": "Assertions",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Assertions are not checked at runtime. There are ways to request that they be\u003cbr /\u003e\nused by Dalvik (adb shell setprop debug.assert 1), but note that this is not\u003cbr /\u003e\nimplemented in ART (the newer runtime), and even in Dalvik the property is\u003cbr /\u003e\nignored in many places and can not be relied upon. Instead, perform\u003cbr /\u003e\nconditional checking inside if (BuildConfig.DEBUG) { } blocks. That constant\u003cbr /\u003e\nis a static final boolean which is true in debug builds and false in release\u003cbr /\u003e\nbuilds, and the Java compiler completely removes all code inside the if-body\u003cbr /\u003e\nfrom the app.\u003cbr /\u003e\n\u003cbr /\u003e\nFor example, you can replace assert speed \u0026gt; 0 with if (BuildConfig.DEBUG \u0026amp;\u0026amp;\u003cbr /\u003e\n!(speed \u0026gt; 0)) { \\\u003cbr /\u003e\nthrow new AssertionError() }.\u003cbr /\u003e\n\u003cbr /\u003e\n(Note: This lint check does not flag assertions purely asserting nullness or\u003cbr /\u003e\nnon-nullness; these are typically more intended for tools usage than runtime\u003cbr /\u003e\nchecks.)\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://code.google.com/p/android/issues/detail?id\u003d65183\"\u003ehttps://code.google.com/p/android/issues/detail?id\u003d65183\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "AuthLeak",
    "name": "Code might contain an auth leak",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Strings in java apps can be discovered by decompiling apps, this lint check\u003cbr /\u003e\nlooks for code which looks like it may contain an url with a username and\u003cbr /\u003e\npassword\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "BackButton",
    "name": "Back button",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable BackButton\u003cbr /\u003e\n\u003cbr /\u003e\nAccording to the Android Design Guide,\u003cbr /\u003e\n\u003cbr /\u003e\n\u0026quot;Other platforms use an explicit back button with label to allow the user to\u003cbr /\u003e\nnavigate up the application\u0027s hierarchy. Instead, Android uses the main action\u003cbr /\u003e\nbar\u0027s app icon for hierarchical navigation and the navigation bar\u0027s back\u003cbr /\u003e\nbutton for temporal navigation.\u0026quot;\u003cbr /\u003e\nThis check is not very sophisticated (it just looks for buttons with the label\u003cbr /\u003e\n\u0026quot;Back\u0026quot;), so it is disabled by default to not trigger on common scenarios like\u003cbr /\u003e\npairs of Back/Next buttons to paginate through screens.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/design/patterns/pure-android.html\"\u003ehttp://developer.android.com/design/patterns/pure-android.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "BadHostnameVerifier",
    "name": "Insecure HostnameVerifier",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check looks for implementations of HostnameVerifier whose verify method\u003cbr /\u003e\nalways returns true (thus trusting any hostname) which could result in\u003cbr /\u003e\ninsecure network traffic caused by trusting arbitrary hostnames in TLS/SSL\u003cbr /\u003e\ncertificates presented by peers.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "BatteryLife",
    "name": "Battery Life Issues",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This issue flags code that either\u003cbr /\u003e\n* negatively affects battery life, or\u003cbr /\u003e\n* uses APIs that have recently changed behavior to prevent background tasks\u003cbr /\u003e\nfrom consuming memory and battery excessively.\u003cbr /\u003e\n\u003cbr /\u003e\nGenerally, you should be using JobScheduler or GcmNetworkManager instead.\u003cbr /\u003e\n\u003cbr /\u003e\nFor more details on how to update your code, please\u003cbr /\u003e\nseehttp://developer.android.com/preview/features/background-optimization.html\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/preview/features/background-optimization.html\"\u003ehttp://developer.android.com/preview/features/background-optimization.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ButtonCase",
    "name": "Cancel/OK dialog button capitalization",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The standard capitalization for OK/Cancel dialogs is \u0026quot;OK\u0026quot; and \u0026quot;Cancel\u0026quot;. To\u003cbr /\u003e\nensure that your dialogs use the standard strings, you can use the resource\u003cbr /\u003e\nstrings @android:string/ok and @android:string/cancel.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ButtonOrder",
    "name": "Button order",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "According to the Android Design Guide,\u003cbr /\u003e\n\u003cbr /\u003e\n\u0026quot;Action buttons are typically Cancel and/or OK, with OK indicating the\u003cbr /\u003e\npreferred or most likely action. However, if the options consist of specific\u003cbr /\u003e\nactions such as Close or Wait rather than a confirmation or cancellation of\u003cbr /\u003e\nthe action described in the content, then all the buttons should be active\u003cbr /\u003e\nverbs. As a rule, the dismissive action of a dialog is always on the left\u003cbr /\u003e\nwhereas the affirmative actions are on the right.\u0026quot;\u003cbr /\u003e\n\u003cbr /\u003e\nThis check looks for button bars and buttons which look like cancel buttons,\u003cbr /\u003e\nand makes sure that these are on the left.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/design/building-blocks/dialogs.html\"\u003ehttp://developer.android.com/design/building-blocks/dialogs.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ButtonStyle",
    "name": "Button should be borderless",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Button bars typically use a borderless style for the buttons. Set the\u003cbr /\u003e\nstyle\u003d\u0026quot;?android:attr/buttonBarButtonStyle\u0026quot; attribute on each of the buttons,\u003cbr /\u003e\nand set style\u003d\u0026quot;?android:attr/buttonBarStyle\u0026quot; on the parent layout\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/design/building-blocks/buttons.html\"\u003ehttp://developer.android.com/design/building-blocks/buttons.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ByteOrderMark",
    "name": "Byte order mark inside files",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Lint will flag any byte-order-mark (BOM) characters it finds in the middle of\u003cbr /\u003e\na file. Since we expect files to be encoded with UTF-8 (see the EnforceUTF8\u003cbr /\u003e\nissue), the BOM characters are not necessary, and they are not handled\u003cbr /\u003e\ncorrectly by all tools. For example, if you have a BOM as part of a resource\u003cbr /\u003e\nname in one particular translation, that name will not be considered identical\u003cbr /\u003e\nto the base resource\u0027s name and the translation will not be used.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://en.wikipedia.org/wiki/Byte_order_mark\"\u003ehttp://en.wikipedia.org/wiki/Byte_order_mark\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "i18n"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CheckResult",
    "name": "Ignoring results",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Some methods have no side effects, an calling them without doing something\u003cbr /\u003e\nwithout the result is suspicious.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ClickableViewAccessibility",
    "name": "Accessibility in Custom Views",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If a View that overrides onTouchEvent or uses an OnTouchListener does not also\u003cbr /\u003e\nimplement performClick and call it when clicks are detected, the View may not\u003cbr /\u003e\nhandle accessibility actions properly. Logic handling the click actions should\u003cbr /\u003e\nideally be placed in View#performClick as some accessibility services invoke\u003cbr /\u003e\nperformClick when a click action should occur.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "accessibility",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CommitPrefEdits",
    "name": "Missing commit() on SharedPreference editor",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "After calling edit() on a SharedPreference, you must call commit() or apply()\u003cbr /\u003e\non the editor to save the results.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CommitTransaction",
    "name": "Missing commit() calls",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "After creating a FragmentTransaction, you typically need to commit it as well\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ContentDescription",
    "name": "Image without contentDescription",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Non-textual widgets like ImageViews and ImageButtons should use the\u003cbr /\u003e\ncontentDescription attribute to specify a textual description of the widget\u003cbr /\u003e\nsuch that screen readers and other accessibility tools can adequately describe\u003cbr /\u003e\nthe user interface.\u003cbr /\u003e\n\u003cbr /\u003e\nNote that elements in application screens that are purely decorative and do\u003cbr /\u003e\nnot provide any content or enable a user action should not have accessibility\u003cbr /\u003e\ncontent descriptions. In this case, just suppress the lint warning with a\u003cbr /\u003e\ntools:ignore\u003d\u0026quot;ContentDescription\u0026quot; attribute.\u003cbr /\u003e\n\u003cbr /\u003e\nNote that for text fields, you should not set both the hint and the\u003cbr /\u003e\ncontentDescription attributes since the hint will never be shown. Just set the\u003cbr /\u003e\nhint. See\u003cbr /\u003e\nhttp://developer.android.com/guide/topics/ui/accessibility/checklist.html#spec\u003cbr /\u003e\nial-cases.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "accessibility",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ConvertToWebp",
    "name": "Convert to WebP",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable ConvertToWebp\u003cbr /\u003e\n\u003cbr /\u003e\nThe WebP format is typically more compact than PNG and JPEG. As of Android\u003cbr /\u003e\n4.2.1 it supports transparency and lossless conversion as well. Note that\u003cbr /\u003e\nthere is a quickfix in the IDE which lets you perform conversion.\u003cbr /\u003e\n\u003cbr /\u003e\nLauncher icons must be in the PNG format.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CustomViewStyleable",
    "name": "Mismatched Styleable/Custom View Name",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The convention for custom views is to use a declare-styleable whose name\u003cbr /\u003e\nmatches the custom view class name. The IDE relies on this convention such\u003cbr /\u003e\nthat for example code completion can be offered for attributes in a custom\u003cbr /\u003e\nview in layout XML resource files.\u003cbr /\u003e\n\u003cbr /\u003e\n(Similarly, layout parameter classes should use the suffix _Layout.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "CutPasteId",
    "name": "Likely cut \u0026 paste mistakes",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This lint check looks for cases where you have cut \u0026amp; pasted calls to\u003cbr /\u003e\nfindViewById but have forgotten to update the R.id field. It\u0027s possible that\u003cbr /\u003e\nyour code is simply (redundantly) looking up the field repeatedly, but lint\u003cbr /\u003e\ncannot distinguish that from a case where you for example want to initialize\u003cbr /\u003e\nfields prev and next and you cut \u0026amp; pasted findViewById(R.id.prev) and forgot\u003cbr /\u003e\nto update the second initialization to R.id.next.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DalvikOverride",
    "name": "Method considered overridden by Dalvik",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "The Android virtual machine will treat a package private method in one class\u003cbr /\u003e\nas overriding a package private method in its super class, even if they are in\u003cbr /\u003e\nseparate packages. This may be surprising, but for compatibility reasons the\u003cbr /\u003e\nbehavior has not been changed (yet).\u003cbr /\u003e\n\u003cbr /\u003e\nIf you really did intend for this method to override the other, make the\u003cbr /\u003e\nmethod protected instead.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you did not intend the override, consider making the method private, or\u003cbr /\u003e\nchanging its name or signature.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DefaultLocale",
    "name": "Implied default locale in case conversion",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Calling String#toLowerCase() or #toUpperCase() without specifying an explicit\u003cbr /\u003e\nlocale is a common source of bugs. The reason for that is that those methods\u003cbr /\u003e\nwill use the current locale on the user\u0027s device, and even though the code\u003cbr /\u003e\nappears to work correctly when you are developing the app, it will fail in\u003cbr /\u003e\nsome locales. For example, in the Turkish locale, the uppercase replacement\u003cbr /\u003e\nfor i is not I.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you want the methods to just perform ASCII replacement, for example to\u003cbr /\u003e\nconvert an enum name, call String#toUpperCase(Locale.US) instead. If you\u003cbr /\u003e\nreally want to use the current locale, call\u003cbr /\u003e\nString#toUpperCase(Locale.getDefault()) instead.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/reference/java/util/Locale.html#default_locale\"\u003ehttp://developer.android.com/reference/java/util/Locale.html#default_locale\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Deprecated",
    "name": "Using deprecated resources",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Deprecated views, attributes and so on are deprecated because there is a\u003cbr /\u003e\nbetter way to do something. Do it that new way. You\u0027ve been warned.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DevModeObsolete",
    "name": "Dev Mode Obsolete",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "In the past, our documentation recommended creating a dev product flavor with\u003cbr /\u003e\nhas a minSdkVersion of 21, in order to enable multidexing to speed up builds\u003cbr /\u003e\nsignificantly during development.\u003cbr /\u003e\n\u003cbr /\u003e\nThat workaround is no longer necessary, and it has some serious downsides,\u003cbr /\u003e\nsuch as breaking API access checking (since the true minSdkVersion is no\u003cbr /\u003e\nlonger known.)\u003cbr /\u003e\n\u003cbr /\u003e\nIn recent versions of the IDE and the Gradle plugin, the IDE automatically\u003cbr /\u003e\npasses the API level of the connected device used for deployment, and if that\u003cbr /\u003e\ndevice is at least API 21, then multidexing is automatically turned on,\u003cbr /\u003e\nmeaning that you get the same speed benefits as the dev product flavor but\u003cbr /\u003e\nwithout the downsides.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DeviceAdmin",
    "name": "Malformed Device Admin",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If you register a broadcast receiver which acts as a device admin, you must\u003cbr /\u003e\nalso register an \u0026lt;intent-filter\u0026gt; for the action\u003cbr /\u003e\nandroid.app.action.DEVICE_ADMIN_ENABLED, without any \u0026lt;data\u0026gt;, such that the\u003cbr /\u003e\ndevice admin can be activated/deactivated.\u003cbr /\u003e\n\u003cbr /\u003e\nTo do this, add\u003cbr /\u003e\n\u0026lt;intent-filter\u0026gt;\u003cbr /\u003e\n    \u0026lt;action android:name\u003d\u0026quot;android.app.action.DEVICE_ADMIN_ENABLED\u0026quot; /\u0026gt;\u003cbr /\u003e\n\u0026lt;/intent-filter\u0026gt;\u003cbr /\u003e\nto your \u0026lt;receiver\u0026gt;.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DisableBaselineAlignment",
    "name": "Missing baselineAligned attribute",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When a LinearLayout is used to distribute the space proportionally between\u003cbr /\u003e\nnested layouts, the baseline alignment property should be turned off to make\u003cbr /\u003e\nthe layout computation faster.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DrawAllocation",
    "name": "Memory allocations within drawing code",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "You should avoid allocating objects during a drawing or layout operation.\u003cbr /\u003e\nThese are called frequently, so a smooth UI can be interrupted by garbage\u003cbr /\u003e\ncollection pauses caused by the object allocations.\u003cbr /\u003e\n\u003cbr /\u003e\nThe way this is generally handled is to allocate the needed objects up front\u003cbr /\u003e\nand to reuse them for each drawing operation.\u003cbr /\u003e\n\u003cbr /\u003e\nSome methods allocate memory on your behalf (such as Bitmap.create), and these\u003cbr /\u003e\nshould be handled in the same way.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DuplicateActivity",
    "name": "Activity registered more than once",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "An activity should only be registered once in the manifest. If it is\u003cbr /\u003e\naccidentally registered more than once, then subtle errors can occur, since\u003cbr /\u003e\nattribute declarations from the two elements are not merged, so you may\u003cbr /\u003e\naccidentally remove previous declarations.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DuplicateDefinition",
    "name": "Duplicate definitions of resources",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "You can define a resource multiple times in different resource folders; that\u0027s\u003cbr /\u003e\nhow string translations are done, for example. However, defining the same\u003cbr /\u003e\nresource more than once in the same resource folder is likely an error, for\u003cbr /\u003e\nexample attempting to add a new resource without realizing that the name is\u003cbr /\u003e\nalready used, and so on.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DuplicateDivider",
    "name": "Unnecessary Divider Copy",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Older versions of the RecyclerView library did not include a divider\u003cbr /\u003e\ndecorator, but one was provided as a sample in the support demos. This divider\u003cbr /\u003e\nclass has been widely copy/pasted into various projects.\u003cbr /\u003e\n\u003cbr /\u003e\nIn recent versions of the support library, the divider decorator is now\u003cbr /\u003e\nincluded, so you can replace custom copies with the \u0026quot;built-in\u0026quot; version,\u003cbr /\u003e\nandroid.support.v7.widget.DividerItemDecoration.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DuplicateIds",
    "name": "Duplicate ids within a single layout",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Within a layout, id\u0027s should be unique since otherwise findViewById() can\u003cbr /\u003e\nreturn an unexpected view.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DuplicateIncludedIds",
    "name": "Duplicate ids across layouts combined with include tags",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "It\u0027s okay for two independent layouts to use the same ids. However, if layouts\u003cbr /\u003e\nare combined with include tags, then the id\u0027s need to be unique within any\u003cbr /\u003e\nchain of included layouts, or Activity#findViewById() can return an unexpected\u003cbr /\u003e\nview.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DuplicatePlatformClasses",
    "name": "Duplicate Platform Classes",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "There are a number of libraries that duplicate not just functionality of the\u003cbr /\u003e\nAndroid platform but using the exact same class names as the ones provided in\u003cbr /\u003e\nAndroid -- for example the apache http classes. This can lead to unexpected\u003cbr /\u003e\ncrashes.\u003cbr /\u003e\n\u003cbr /\u003e\nTo solve this, you need to either find a newer version of the library which no\u003cbr /\u003e\nlonger has this problem, or to repackage the library (and all of its\u003cbr /\u003e\ndependencies) using something like the jarjar tool, or finally, rewriting the\u003cbr /\u003e\ncode to use different APIs (for example, for http code, consider using\u003cbr /\u003e\nHttpUrlConnection or a library like okhttp.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "DuplicateUsesFeature",
    "name": "Feature declared more than once",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A given feature should only be declared once in the manifest.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EasterEgg",
    "name": "Code contains easter egg",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable EasterEgg\u003cbr /\u003e\n\u003cbr /\u003e\nAn \u0026quot;easter egg\u0026quot; is code deliberately hidden in the code, both from potential\u003cbr /\u003e\nusers and even from other developers. This lint check looks for code which\u003cbr /\u003e\nlooks like it may be hidden from sight.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EllipsizeMaxLines",
    "name": "Combining Ellipsize and Maxlines",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Combining ellipsize and maxLines\u003d1 can lead to crashes on some devices.\u003cbr /\u003e\nEarlier versions of lint recommended replacing singleLine\u003dtrue with maxLines\u003d1\u003cbr /\u003e\nbut that should not be done when using ellipsize.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://issuetracker.google.com/issues/36950033\"\u003ehttps://issuetracker.google.com/issues/36950033\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "EnforceUTF8",
    "name": "Encoding used in resource files is not UTF-8",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "XML supports encoding in a wide variety of character sets. However, not all\u003cbr /\u003e\ntools handle the XML encoding attribute correctly, and nearly all Android apps\u003cbr /\u003e\nuse UTF-8, so by using UTF-8 you can protect yourself against subtle bugs when\u003cbr /\u003e\nusing non-ASCII characters.\u003cbr /\u003e\n\u003cbr /\u003e\nIn particular, the Android Gradle build system will merge resource XML files\u003cbr /\u003e\nassuming the resource files are using UTF-8 encoding.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "i18n"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ExifInterface",
    "name": "Using android.media.ExifInterface",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The android.media.ExifInterface implementation has some known security bugs in\u003cbr /\u003e\nolder versions of Android. There is a new implementation available of this\u003cbr /\u003e\nlibrary in the support library, which is preferable.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ExportedContentProvider",
    "name": "Content provider does not require permission",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Content providers are exported by default and any application on the system\u003cbr /\u003e\ncan potentially use them to read and write data. If the content provider\u003cbr /\u003e\nprovides access to sensitive data, it should be protected by specifying\u003cbr /\u003e\nexport\u003dfalse in the manifest or by protecting it with a permission that can be\u003cbr /\u003e\ngranted to other applications.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ExportedPreferenceActivity",
    "name": "PreferenceActivity should not be exported",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Fragment injection gives anyone who can send your PreferenceActivity an intent\u003cbr /\u003e\nthe ability to load any fragment, with any arguments, in your process.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://securityintelligence.com/new-vulnerability-android-framework-fragment-injection\"\u003ehttp://securityintelligence.com/new-vulnerability-android-framework-fragment-injection\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ExportedReceiver",
    "name": "Receiver does not require permission",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Exported receivers (receivers which either set exported\u003dtrue or contain an\u003cbr /\u003e\nintent-filter and do not specify exported\u003dfalse) should define a permission\u003cbr /\u003e\nthat an entity must have in order to launch the receiver or bind to it.\u003cbr /\u003e\nWithout this, any application can use this receiver.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ExportedService",
    "name": "Exported service does not require permission",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Exported services (services which either set exported\u003dtrue or contain an\u003cbr /\u003e\nintent-filter and do not specify exported\u003dfalse) should define a permission\u003cbr /\u003e\nthat an entity must have in order to launch the service or bind to it. Without\u003cbr /\u003e\nthis, any application can use this service.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ExtraText",
    "name": "Extraneous text in resource files",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Layout resource files should only contain elements and attributes. Any XML\u003cbr /\u003e\ntext content found in the file is likely accidental (and potentially dangerous\u003cbr /\u003e\nif the text resembles XML and the developer believes the text to be\u003cbr /\u003e\nfunctional)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ExtraTranslation",
    "name": "Extra translation",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "If a string appears in a specific language translation file, but there is no\u003cbr /\u003e\ncorresponding string in the default locale, then this string is probably\u003cbr /\u003e\nunused. (It\u0027s technically possible that your application is only intended to\u003cbr /\u003e\nrun in a specific locale, but it\u0027s still a good idea to provide a fallback.).\u003cbr /\u003e\n\u003cbr /\u003e\nNote that these strings can lead to crashes if the string is looked up on any\u003cbr /\u003e\nlocale not providing a translation, so it\u0027s important to clean them up.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FieldGetter",
    "name": "Using getter instead of field",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable FieldGetter\u003cbr /\u003e\n\u003cbr /\u003e\nAccessing a field within the class that defines a getter for that field is at\u003cbr /\u003e\nleast 3 times faster than calling the getter. For simple getters that do\u003cbr /\u003e\nnothing other than return the field, you might want to just reference the\u003cbr /\u003e\nlocal field directly instead.\u003cbr /\u003e\n\u003cbr /\u003e\nNOTE: As of Android 2.3 (Gingerbread), this optimization is performed\u003cbr /\u003e\nautomatically by Dalvik, so there is no need to change your code; this is only\u003cbr /\u003e\nrelevant if you are targeting older versions of Android.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/practices/design/performance.html#internal_get_set\"\u003ehttp://developer.android.com/guide/practices/design/performance.html#internal_get_set\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FindViewByIdCast",
    "name": "Add Explicit Cast",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "In Android O, the findViewById signature switched to using generics, which\u003cbr /\u003e\nmeans that most of the time you can leave out explicit casts and just assign\u003cbr /\u003e\nthe result of the findViewById call to variables of specific view classes.\u003cbr /\u003e\n\u003cbr /\u003e\nHowever, due to language changes between Java 7 and 8, this change may cause\u003cbr /\u003e\ncode to not compile without explicit casts. This lint check looks for these\u003cbr /\u003e\nscenarios and suggests casts to be added now such that the code will continue\u003cbr /\u003e\nto compile if the language level is updated to 1.8.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FloatMath",
    "name": "Using FloatMath instead of Math",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "In older versions of Android, using android.util.FloatMath was recommended for\u003cbr /\u003e\nperformance reasons when operating on floats. However, on modern hardware\u003cbr /\u003e\ndoubles are just as fast as float (though they take more memory), and in\u003cbr /\u003e\nrecent versions of Android, FloatMath is actually slower than using\u003cbr /\u003e\njava.lang.Math due to the way the JIT optimizes java.lang.Math. Therefore, you\u003cbr /\u003e\nshould use Math instead of FloatMath if you are only targeting Froyo and\u003cbr /\u003e\nabove.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/practices/design/performance.html#avoidfloat\"\u003ehttp://developer.android.com/guide/practices/design/performance.html#avoidfloat\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FontValidationError",
    "name": "Validation of font files",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Look for problems in various font files.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/guide/topics/text/downloadable-fonts.html\"\u003ehttps://developer.android.com/guide/topics/text/downloadable-fonts.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FontValidationWarning",
    "name": "Validation of font files",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Look for problems in various font files.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/guide/topics/text/downloadable-fonts.html\"\u003ehttps://developer.android.com/guide/topics/text/downloadable-fonts.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "FullBackupContent",
    "name": "Valid Full Backup Content File",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Ensures that a \u0026lt;full-backup-content\u0026gt; file, which is pointed to by a\u003cbr /\u003e\nandroid:fullBackupContent attribute in the manifest file, is valid\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://android-developers.blogspot.com/2015/07/auto-backup-for-apps-made-simple.html\"\u003ehttp://android-developers.blogspot.com/2015/07/auto-backup-for-apps-made-simple.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GetContentDescriptionOverride",
    "name": "Overriding getContentDescription() on a View",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Overriding getContentDescription() may prevent some accessibility services\u003cbr /\u003e\nfrom properly navigating content exposed by your view. Instead, call\u003cbr /\u003e\nsetContentDescription() when the content description needs to be changed.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "accessibility",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GetInstance",
    "name": "Cipher.getInstance with ECB",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Cipher#getInstance should not be called with ECB as the cipher mode or without\u003cbr /\u003e\nsetting the cipher mode because the default mode on android is ECB, which is\u003cbr /\u003e\ninsecure.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GetLocales",
    "name": "Locale crash",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "TODO\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GifUsage",
    "name": "Using .gif format for bitmaps is discouraged",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The .gif file format is discouraged. Consider using .png (preferred) or .jpg\u003cbr /\u003e\n(acceptable) instead.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap\"\u003ehttp://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GoogleAppIndexingApiWarning",
    "name": "Missing support for Firebase App Indexing Api",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable GoogleAppIndexingApiWarning\u003cbr /\u003e\n\u003cbr /\u003e\nAdds URLs to get your app into the Google index, to get installs and traffic\u003cbr /\u003e\nto your app from Google Search.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://g.co/AppIndexing/AndroidStudio\"\u003ehttps://g.co/AppIndexing/AndroidStudio\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GoogleAppIndexingWarning",
    "name": "Missing support for Firebase App Indexing",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Adds URLs to get your app into the Google index, to get installs and traffic\u003cbr /\u003e\nto your app from Google Search.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://g.co/AppIndexing/AndroidStudio\"\u003ehttps://g.co/AppIndexing/AndroidStudio\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GradleCompatible",
    "name": "Incompatible Gradle Versions",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "There are some combinations of libraries, or tools and libraries, that are\u003cbr /\u003e\nincompatible, or can lead to bugs. One such incompatibility is compiling with\u003cbr /\u003e\na version of the Android support libraries that is not the latest version (or\u003cbr /\u003e\nin particular, a version lower than your targetSdkVersion.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GradleDependency",
    "name": "Obsolete Gradle Dependency",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This detector looks for usages of libraries where the version you are using is\u003cbr /\u003e\nnot the current stable release. Using older versions is fine, and there are\u003cbr /\u003e\ncases where you deliberately want to stick with an older version. However, you\u003cbr /\u003e\nmay simply not be aware that a more recent version is available, and that is\u003cbr /\u003e\nwhat this lint check helps find.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GradleDeprecated",
    "name": "Deprecated Gradle Construct",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This detector looks for deprecated Gradle constructs which currently work but\u003cbr /\u003e\nwill likely stop working in a future update.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GradleDynamicVersion",
    "name": "Gradle Dynamic Version",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Using + in dependencies lets you automatically pick up the latest available\u003cbr /\u003e\nversion rather than a specific, named version. However, this is not\u003cbr /\u003e\nrecommended; your builds are not repeatable; you may have tested with a\u003cbr /\u003e\nslightly different version than what the build server used. (Using a dynamic\u003cbr /\u003e\nversion as the major version number is more problematic than using it in the\u003cbr /\u003e\nminor version position.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GradleGetter",
    "name": "Gradle Implicit Getter Call",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Gradle will let you replace specific constants in your build scripts with\u003cbr /\u003e\nmethod calls, so you can for example dynamically compute a version string\u003cbr /\u003e\nbased on your current version control revision number, rather than hardcoding\u003cbr /\u003e\na number.\u003cbr /\u003e\n\u003cbr /\u003e\nWhen computing a version name, it\u0027s tempting to for example call the method to\u003cbr /\u003e\ndo that getVersionName. However, when you put that method call inside the\u003cbr /\u003e\ndefaultConfig block, you will actually be calling the Groovy getter for the\u003cbr /\u003e\nversionName property instead. Therefore, you need to name your method\u003cbr /\u003e\nsomething which does not conflict with the existing implicit getters. Consider\u003cbr /\u003e\nusing compute as a prefix instead of get.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GradleIdeError",
    "name": "Gradle IDE Support Issues",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "Gradle is highly flexible, and there are things you can do in Gradle files\u003cbr /\u003e\nwhich can make it hard or impossible for IDEs to properly handle the project.\u003cbr /\u003e\nThis lint check looks for constructs that potentially break IDE support.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GradleOverrides",
    "name": "Value overridden by Gradle build script",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The value of (for example) minSdkVersion is only used if it is not specified\u003cbr /\u003e\nin the build.gradle build scripts. When specified in the Gradle build scripts,\u003cbr /\u003e\nthe manifest value is ignored and can be misleading, so should be removed to\u003cbr /\u003e\navoid ambiguity.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GradlePath",
    "name": "Gradle Path Issues",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Gradle build scripts are meant to be cross platform, so file paths use\u003cbr /\u003e\nUnix-style path separators (a forward slash) rather than Windows path\u003cbr /\u003e\nseparators (a backslash). Similarly, to keep projects portable and repeatable,\u003cbr /\u003e\navoid using absolute paths on the system; keep files within the project\u003cbr /\u003e\ninstead. To share code between projects, consider creating an android-library\u003cbr /\u003e\nand an AAR dependency\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GradlePluginVersion",
    "name": "Incompatible Android Gradle Plugin",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Not all versions of the Android Gradle plugin are compatible with all versions\u003cbr /\u003e\nof the SDK. If you update your tools, or if you are trying to open a project\u003cbr /\u003e\nthat was built with an old version of the tools, you may need to update your\u003cbr /\u003e\nplugin version number.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GrantAllUris",
    "name": "Content provider shares everything",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The \u0026lt;grant-uri-permission\u0026gt; element allows specific paths to be shared. This\u003cbr /\u003e\ndetector checks for a path URL of just \u0027/\u0027 (everything), which is probably not\u003cbr /\u003e\nwhat you want; you should limit access to a subset.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "GridLayout",
    "name": "GridLayout validation",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Declaring a layout_row or layout_column that falls outside the declared size\u003cbr /\u003e\nof a GridLayout\u0027s rowCount or columnCount is usually an unintentional error.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "HandlerLeak",
    "name": "Handler reference leaks",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Since this Handler is declared as an inner class, it may prevent the outer\u003cbr /\u003e\nclass from being garbage collected. If the Handler is using a Looper or\u003cbr /\u003e\nMessageQueue for a thread other than the main thread, then there is no issue.\u003cbr /\u003e\nIf the Handler is using the Looper or MessageQueue of the main thread, you\u003cbr /\u003e\nneed to fix your Handler declaration, as follows: Declare the Handler as a\u003cbr /\u003e\nstatic class; In the outer class, instantiate a WeakReference to the outer\u003cbr /\u003e\nclass and pass this object to your Handler when you instantiate the Handler;\u003cbr /\u003e\nMake all references to members of the outer class using the WeakReference\u003cbr /\u003e\nobject.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "HardcodedDebugMode",
    "name": "Hardcoded value of android:debuggable in the manifest",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "It\u0027s best to leave out the android:debuggable attribute from the manifest. If\u003cbr /\u003e\nyou do, then the tools will automatically insert android:debuggable\u003dtrue when\u003cbr /\u003e\nbuilding an APK to debug on an emulator or device. And when you perform a\u003cbr /\u003e\nrelease build, such as Exporting APK, it will automatically set it to false.\u003cbr /\u003e\n\u003cbr /\u003e\nIf on the other hand you specify a specific value in the manifest file, then\u003cbr /\u003e\nthe tools will always use it. This can lead to accidentally publishing your\u003cbr /\u003e\napp with debug information.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "HardcodedText",
    "name": "Hardcoded text",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Hardcoding text attributes directly in layout files is bad for several\u003cbr /\u003e\nreasons:\u003cbr /\u003e\n\u003cbr /\u003e\n* When creating configuration variations (for example for landscape or\u003cbr /\u003e\nportrait)you have to repeat the actual text (and keep it up to date when\u003cbr /\u003e\nmaking changes)\u003cbr /\u003e\n\u003cbr /\u003e\n* The application cannot be translated to other languages by just adding new\u003cbr /\u003e\ntranslations for existing string resources.\u003cbr /\u003e\n\u003cbr /\u003e\nThere are quickfixes to automatically extract this hardcoded string into a\u003cbr /\u003e\nresource lookup.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "i18n"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "HardwareIds",
    "name": "Hardware Id Usage",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Using these device identifiers is not recommended other than for high value\u003cbr /\u003e\nfraud prevention and advanced telephony use-cases. For advertising use-cases,\u003cbr /\u003e\nuse AdvertisingIdClient$Info#getId and for analytics, use InstanceId#getId.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/articles/user-data-ids.html\"\u003ehttps://developer.android.com/training/articles/user-data-ids.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "HighAppVersionCode",
    "name": "VersionCode too high",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "The declared versionCode is an Integer. Ensure that the version number is not\u003cbr /\u003e\nclose to the limit. It is recommended to monotonically increase this number\u003cbr /\u003e\neach minor or major release of the app. Note that updating an app with a\u003cbr /\u003e\nversionCode over Integer.MAX_VALUE is not possible.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/studio/publish/versioning.html\"\u003ehttps://developer.android.com/studio/publish/versioning.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconColors",
    "name": "Icon colors do not follow the recommended visual style",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Notification icons and Action Bar icons should only white and shades of gray.\u003cbr /\u003e\nSee the Android Design Guide for more details. Note that the way Lint decides\u003cbr /\u003e\nwhether an icon is an action bar icon or a notification icon is based on the\u003cbr /\u003e\nfilename prefix: ic_menu_ for action bar icons, ic_stat_ for notification\u003cbr /\u003e\nicons etc. These correspond to the naming conventions documented in\u003cbr /\u003e\nhttp://developer.android.com/guide/practices/ui_guidelines/icon_design.html\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/design/style/iconography.html\"\u003ehttp://developer.android.com/design/style/iconography.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconDensities",
    "name": "Icon densities validation",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Icons will look best if a custom version is provided for each of the major\u003cbr /\u003e\nscreen density classes (low, medium, high, extra high). This lint check\u003cbr /\u003e\nidentifies icons which do not have complete coverage across the densities.\u003cbr /\u003e\n\u003cbr /\u003e\nLow density is not really used much anymore, so this check ignores the ldpi\u003cbr /\u003e\ndensity. To force lint to include it, set the environment variable\u003cbr /\u003e\nANDROID_LINT_INCLUDE_LDPI\u003dtrue. For more information on current density usage,\u003cbr /\u003e\nsee http://developer.android.com/resources/dashboard/screens.html\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/practices/screens_support.html\"\u003ehttp://developer.android.com/guide/practices/screens_support.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconDipSize",
    "name": "Icon density-independent size validation",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Checks the all icons which are provided in multiple densities, all compute to\u003cbr /\u003e\nroughly the same density-independent pixel (dip) size. This catches errors\u003cbr /\u003e\nwhere images are either placed in the wrong folder, or icons are changed to\u003cbr /\u003e\nnew sizes but some folders are forgotten.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconDuplicates",
    "name": "Duplicated icons under different names",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If an icon is repeated under different names, you can consolidate and just use\u003cbr /\u003e\none of the icons and delete the others to make your application smaller.\u003cbr /\u003e\nHowever, duplicated icons usually are not intentional and can sometimes point\u003cbr /\u003e\nto icons that were accidentally overwritten or accidentally not updated.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconDuplicatesConfig",
    "name": "Identical bitmaps across various configurations",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If an icon is provided under different configuration parameters such as\u003cbr /\u003e\ndrawable-hdpi or -v11, they should typically be different. This detector\u003cbr /\u003e\ncatches cases where the same icon is provided in different configuration\u003cbr /\u003e\nfolder which is usually not intentional.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconExpectedSize",
    "name": "Icon has incorrect size",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable IconExpectedSize\u003cbr /\u003e\n\u003cbr /\u003e\nThere are predefined sizes (for each density) for launcher icons. You should\u003cbr /\u003e\nfollow these conventions to make sure your icons fit in with the overall look\u003cbr /\u003e\nof the platform.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/design/style/iconography.html\"\u003ehttp://developer.android.com/design/style/iconography.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconExtension",
    "name": "Icon format does not match the file extension",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Ensures that icons have the correct file extension (e.g. a .png file is really\u003cbr /\u003e\nin the PNG format and not for example a GIF file named .png.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconLauncherShape",
    "name": "The launcher icon shape should use a distinct silhouette",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "According to the Android Design Guide\u003cbr /\u003e\n(http://developer.android.com/design/style/iconography.html) your launcher\u003cbr /\u003e\nicons should \u0026quot;use a distinct silhouette\u0026quot;, a \u0026quot;three-dimensional, front view,\u003cbr /\u003e\nwith a slight perspective as if viewed from above, so that users perceive some\u003cbr /\u003e\ndepth.\u0026quot;\u003cbr /\u003e\n\u003cbr /\u003e\nThe unique silhouette implies that your launcher icon should not be a filled\u003cbr /\u003e\nsquare.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/design/style/iconography.html\"\u003ehttp://developer.android.com/design/style/iconography.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconLocation",
    "name": "Image defined in density-independent drawable folder",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The res/drawable folder is intended for density-independent graphics such as\u003cbr /\u003e\nshapes defined in XML. For bitmaps, move it to drawable-mdpi and consider\u003cbr /\u003e\nproviding higher and lower resolution versions in drawable-ldpi, drawable-hdpi\u003cbr /\u003e\nand drawable-xhdpi. If the icon really is density independent (for example a\u003cbr /\u003e\nsolid color) you can place it in drawable-nodpi.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/practices/screens_support.html\"\u003ehttp://developer.android.com/guide/practices/screens_support.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconMissingDensityFolder",
    "name": "Missing density folder",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Icons will look best if a custom version is provided for each of the major\u003cbr /\u003e\nscreen density classes (low, medium, high, extra-high, extra-extra-high). This\u003cbr /\u003e\nlint check identifies folders which are missing, such as drawable-hdpi.\u003cbr /\u003e\n\u003cbr /\u003e\nLow density is not really used much anymore, so this check ignores the ldpi\u003cbr /\u003e\ndensity. To force lint to include it, set the environment variable\u003cbr /\u003e\nANDROID_LINT_INCLUDE_LDPI\u003dtrue. For more information on current density usage,\u003cbr /\u003e\nsee http://developer.android.com/resources/dashboard/screens.html\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/practices/screens_support.html\"\u003ehttp://developer.android.com/guide/practices/screens_support.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconMixedNinePatch",
    "name": "Clashing PNG and 9-PNG files",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If you accidentally name two separate resources file.png and file.9.png, the\u003cbr /\u003e\nimage file and the nine patch file will both map to the same drawable\u003cbr /\u003e\nresource, @drawable/file, which is probably not what was intended.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconNoDpi",
    "name": "Icon appears in both -nodpi and dpi folders",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Bitmaps that appear in drawable-nodpi folders will not be scaled by the\u003cbr /\u003e\nAndroid framework. If a drawable resource of the same name appears both in a\u003cbr /\u003e\n-nodpi folder as well as a dpi folder such as drawable-hdpi, then the behavior\u003cbr /\u003e\nis ambiguous and probably not intentional. Delete one or the other, or use\u003cbr /\u003e\ndifferent names for the icons.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IconXmlAndPng",
    "name": "Icon is specified both as .xml file and as a bitmap",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If a drawable resource appears as an .xml file in the drawable/ folder, it\u0027s\u003cbr /\u003e\nusually not intentional for it to also appear as a bitmap using the same name;\u003cbr /\u003e\ngenerally you expect the drawable XML file to define states and each state has\u003cbr /\u003e\na corresponding drawable bitmap.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IllegalResourceRef",
    "name": "Name and version must be integer or string, not resource",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "For the versionCode attribute, you have to specify an actual integer literal;\u003cbr /\u003e\nyou cannot use an indirection with a @dimen/name resource. Similarly, the\u003cbr /\u003e\nversionName attribute should be an actual string, not a string resource url.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ImpliedQuantity",
    "name": "Implied Quantities",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Plural strings should generally include a %s or %d formatting argument. In\u003cbr /\u003e\nlocales like English, the one quantity only applies to a single value, 1, but\u003cbr /\u003e\nthat\u0027s not true everywhere. For example, in Slovene, the one quantity will\u003cbr /\u003e\napply to 1, 101, 201, 301, and so on. Similarly, there are locales where\u003cbr /\u003e\nmultiple values match the zero and two quantities.\u003cbr /\u003e\n\u003cbr /\u003e\nIn these locales, it is usually an error to have a message which does not\u003cbr /\u003e\ninclude a formatting argument (such as \u0027%d\u0027), since it will not be clear from\u003cbr /\u003e\nthe grammar what quantity the quantity string is describing.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/resources/string-resource.html#Plurals\"\u003ehttp://developer.android.com/guide/topics/resources/string-resource.html#Plurals\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ImpliedTouchscreenHardware",
    "name": "Hardware feature touchscreen not explicitly marked as optional",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Apps require the android.hardware.touchscreen feature by default. If you want\u003cbr /\u003e\nyour app to be available on TV, you must also explicitly declare that a\u003cbr /\u003e\ntouchscreen is not required as follows:\u003cbr /\u003e\n\u0026lt;uses-feature android:name\u003d\u0026quot;android.hardware.touchscreen\u0026quot;\u003cbr /\u003e\nandroid:required\u003d\u0026quot;false\u0026quot;/\u0026gt;\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/guide/topics/manifest/uses-feature-element.html\"\u003ehttps://developer.android.com/guide/topics/manifest/uses-feature-element.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InOrMmUsage",
    "name": "Using mm or in dimensions",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid using mm (millimeters) or in (inches) as the unit for dimensions.\u003cbr /\u003e\n\u003cbr /\u003e\nWhile it should work in principle, unfortunately many devices do not report\u003cbr /\u003e\nthe correct true physical density, which means that the dimension calculations\u003cbr /\u003e\nwon\u0027t work correctly. You are better off using dp (and for font sizes, sp.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IncludeLayoutParam",
    "name": "Ignored layout params on include",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Layout parameters specified on an \u0026lt;include\u0026gt; tag will only be used if you also\u003cbr /\u003e\noverride layout_width and layout_height on the \u0026lt;include\u0026gt; tag; otherwise they\u003cbr /\u003e\nwill be ignored.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://stackoverflow.com/questions/2631614/does-android-xml-layouts-include-tag-really-work\"\u003ehttp://stackoverflow.com/questions/2631614/does-android-xml-layouts-include-tag-really-work\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "IncompatibleMediaBrowserServiceCompatVersion",
    "name": "Obsolete version of MediaBrowserServiceCompat",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "MediaBrowserServiceCompat from version 23.2.0 to 23.4.0 of the Support v4\u003cbr /\u003e\nLibrary used private APIs and will not be compatible with future versions of\u003cbr /\u003e\nAndroid beyond Android N.Please upgrade to version 24.0.0 or higher of the\u003cbr /\u003e\nSupport Library.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InconsistentArrays",
    "name": "Inconsistencies in array element counts",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When an array is translated in a different locale, it should normally have the\u003cbr /\u003e\nsame number of elements as the original array. When adding or removing\u003cbr /\u003e\nelements to an array, it is easy to forget to update all the locales, and this\u003cbr /\u003e\nlint warning finds inconsistencies like these.\u003cbr /\u003e\n\u003cbr /\u003e\nNote however that there may be cases where you really want to declare a\u003cbr /\u003e\ndifferent number of array items in each configuration (for example where the\u003cbr /\u003e\narray represents available options, and those options differ for different\u003cbr /\u003e\nlayout orientations and so on), so use your own judgement to decide if this is\u003cbr /\u003e\nreally an error.\u003cbr /\u003e\n\u003cbr /\u003e\nYou can suppress this error type if it finds false errors in your project.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InconsistentLayout",
    "name": "Inconsistent Layouts",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check ensures that a layout resource which is defined in multiple\u003cbr /\u003e\nresource folders, specifies the same set of widgets.\u003cbr /\u003e\n\u003cbr /\u003e\nThis finds cases where you have accidentally forgotten to add a widget to all\u003cbr /\u003e\nvariations of the layout, which could result in a runtime crash for some\u003cbr /\u003e\nresource configurations when a findViewById() fails.\u003cbr /\u003e\n\u003cbr /\u003e\nThere are cases where this is intentional. For example, you may have a\u003cbr /\u003e\ndedicated large tablet layout which adds some extra widgets that are not\u003cbr /\u003e\npresent in the phone version of the layout. As long as the code accessing the\u003cbr /\u003e\nlayout resource is careful to handle this properly, it is valid. In that case,\u003cbr /\u003e\nyou can suppress this lint check for the given extra or missing views, or the\u003cbr /\u003e\nwhole layout\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InefficientWeight",
    "name": "Inefficient layout weight",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When only a single widget in a LinearLayout defines a weight, it is more\u003cbr /\u003e\nefficient to assign a width/height of 0dp to it since it will absorb all the\u003cbr /\u003e\nremaining space anyway. With a declared width/height of 0dp it does not have\u003cbr /\u003e\nto measure its own size first.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InflateParams",
    "name": "Layout Inflation without a Parent",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When inflating a layout, avoid passing in null as the parent view, since\u003cbr /\u003e\notherwise any layout parameters on the root of the inflated layout will be\u003cbr /\u003e\nignored.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://www.doubleencore.com/2013/05/layout-inflation-as-intended\"\u003ehttp://www.doubleencore.com/2013/05/layout-inflation-as-intended\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InlinedApi",
    "name": "Using inlined constants on older versions",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check scans through all the Android API field references in the\u003cbr /\u003e\napplication and flags certain constants, such as static final integers and\u003cbr /\u003e\nStrings, which were introduced in later versions. These will actually be\u003cbr /\u003e\ncopied into the class files rather than being referenced, which means that the\u003cbr /\u003e\nvalue is available even when running on older devices. In some cases that\u0027s\u003cbr /\u003e\nfine, and in other cases it can result in a runtime crash or incorrect\u003cbr /\u003e\nbehavior. It depends on the context, so consider the code carefully and device\u003cbr /\u003e\nwhether it\u0027s safe and can be suppressed or whether the code needs tbe\u003cbr /\u003e\nguarded.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you really want to use this API and don\u0027t need to support older devices\u003cbr /\u003e\njust set the minSdkVersion in your build.gradle or AndroidManifest.xml files.\u003cbr /\u003e\nIf your code is deliberately accessing newer APIs, and you have ensured (e.g.\u003cbr /\u003e\nwith conditional execution) that this code will only ever be called on a\u003cbr /\u003e\nsupported platform, then you can annotate your class or method with the\u003cbr /\u003e\n@TargetApi annotation specifying the local minimum SDK to apply, such as\u003cbr /\u003e\n@TargetApi(11), such that this check considers 11 rather than your manifest\u003cbr /\u003e\nfile\u0027s minimum SDK as the required API level.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InnerclassSeparator",
    "name": "Inner classes should use $ rather than .",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When you reference an inner class in a manifest file, you must use \u0027$\u0027 instead\u003cbr /\u003e\nof \u0027.\u0027 as the separator character, i.e. Outer$Inner instead of Outer.Inner.\u003cbr /\u003e\n\u003cbr /\u003e\n(If you get this warning for a class which is not actually an inner class,\u003cbr /\u003e\nit\u0027s because you are using uppercase characters in your package name, which is\u003cbr /\u003e\nnot conventional.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InstantApps",
    "name": "Instant App Issues",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This issue flags code that will not work correctly in Instant Apps\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Instantiatable",
    "name": "Registered class is not instantiatable",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Activities, services, broadcast receivers etc. registered in the manifest file\u003cbr /\u003e\n(or for custom views, in a layout file) must be \u0026quot;instantiatable\u0026quot; by the\u003cbr /\u003e\nsystem, which means that the class must be public, it must have an empty\u003cbr /\u003e\npublic constructor, and if it\u0027s an inner class, it must be a static inner\u003cbr /\u003e\nclass.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InvalidAnalyticsName",
    "name": "Invalid Analytics Name",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Event names and parameters must follow the naming conventions defined in\u003cbr /\u003e\nthe`FirebaseAnalytics#logEvent()` documentation.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics#logEvent(java.lang.String,%20android.os.Bundle)\"\u003ehttp://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics#logEvent(java.lang.String,%20android.os.Bundle)\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InvalidId",
    "name": "Invalid ID declaration",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "An id definition must be of the form @+id/yourname. The tools have not\u003cbr /\u003e\nrejected strings of the form @+foo/bar in the past, but that was an error, and\u003cbr /\u003e\ncould lead to tricky errors because of the way the id integers are assigned.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you really want to have different \u0026quot;scopes\u0026quot; for your id\u0027s, use prefixes\u003cbr /\u003e\ninstead, such as login_button1 and login_button2.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InvalidImeActionId",
    "name": "Invalid imeActionId declaration",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "android:imeActionId should not be a resourceId such as @+id/resName. It must\u003cbr /\u003e\nbe an integer constant, or an integer resource reference, as defined in\u003cbr /\u003e\nEditorInfo.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/reference/android/view/inputmethod/EditorInfo.html\"\u003ehttps://developer.android.com/reference/android/view/inputmethod/EditorInfo.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InvalidPackage",
    "name": "Package not included in Android",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "This check scans through libraries looking for calls to APIs that are not\u003cbr /\u003e\nincluded in Android.\u003cbr /\u003e\n\u003cbr /\u003e\nWhen you create Android projects, the classpath is set up such that you can\u003cbr /\u003e\nonly access classes in the API packages that are included in Android. However,\u003cbr /\u003e\nif you add other projects to your libs/ folder, there is no guarantee that\u003cbr /\u003e\nthose .jar files were built with an Android specific classpath, and in\u003cbr /\u003e\nparticular, they could be accessing unsupported APIs such as java.applet.\u003cbr /\u003e\n\u003cbr /\u003e\nThis check scans through library jars and looks for references to API packages\u003cbr /\u003e\nthat are not included in Android and flags these. This is only an error if\u003cbr /\u003e\nyour code calls one of the library classes which wind up referencing the\u003cbr /\u003e\nunsupported package.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InvalidPermission",
    "name": "Invalid Permission Attribute",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Not all elements support the permission attribute. If a permission is set on\u003cbr /\u003e\nan invalid element, it is a no-op and ignored. Ensure that this permission\u003cbr /\u003e\nattribute was set on the correct element to protect the correct component.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InvalidResourceFolder",
    "name": "Invalid Resource Folder",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "This lint check looks for a folder name that is not a valid resource folder\u003cbr /\u003e\nname; these will be ignored and not packaged by the Android Gradle build\u003cbr /\u003e\nplugin.\u003cbr /\u003e\n\u003cbr /\u003e\nNote that the order of resources is very important; for example, you can\u0027t\u003cbr /\u003e\nspecify a language before a network code.\u003cbr /\u003e\n\u003cbr /\u003e\nSimilarly, note that to use 3 letter region codes, you have to use a special\u003cbr /\u003e\nBCP 47 syntax: the prefix b+ followed by the BCP 47 language tag but with + as\u003cbr /\u003e\nthe individual separators instead of -. Therefore, for the BCP 47 language tag\u003cbr /\u003e\nnl-ABW you have to use b+nl+ABW.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/resources/providing-resources.html\"\u003ehttp://developer.android.com/guide/topics/resources/providing-resources.html\u003c/a\u003e\u003cbr /\u003e\nhttps://tools.ietf.org/html/bcp47\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InvalidUsesTagAttribute",
    "name": "Invalid name attribute for uses element.",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "The \u0026lt;uses\u0026gt; element in \u0026lt;automotiveApp\u0026gt; should contain a valid value for the\u003cbr /\u003e\nname attribute.\u003cbr /\u003e\nValid values are media or notification.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/auto/start/index.html#auto-metadata\"\u003ehttps://developer.android.com/training/auto/start/index.html#auto-metadata\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InvalidVectorPath",
    "name": "Invalid vector paths",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "This check ensures that vector paths are valid. For example, it makes sure\u003cbr /\u003e\nthat the numbers are not using scientific notation (such as 1.0e3) which can\u003cbr /\u003e\nlead to runtime crashes on older devices.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://code.google.com/p/android/issues/detail?id\u003d78162\"\u003ehttps://code.google.com/p/android/issues/detail?id\u003d78162\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "InvalidWearFeatureAttribute",
    "name": "Invalid attribute for Wear uses-feature",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "For the android.hardware.type.watch uses-feature, android:required\u003d\u0026quot;false\u0026quot; is\u003cbr /\u003e\ndisallowed. A single APK for Wear and non-Wear devices is not supported.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/wearables/apps/packaging.html\"\u003ehttps://developer.android.com/training/wearables/apps/packaging.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "JavascriptInterface",
    "name": "Missing @JavascriptInterface on methods",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "As of API 17, you must annotate methods in objects registered with the\u003cbr /\u003e\naddJavascriptInterface method with a @JavascriptInterface annotation.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\nhttp://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "JobSchedulerService",
    "name": "JobScheduler problems",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check looks for various common mistakes in using the JobScheduler API:\u003cbr /\u003e\nthe service class must extend JobService, the service must be registered in\u003cbr /\u003e\nthe manifest and the registration must require the permission\u003cbr /\u003e\nandroid.permission.BIND_JOB_SERVICE.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/topic/performance/scheduling.html\"\u003ehttps://developer.android.com/topic/performance/scheduling.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "KeyboardInaccessibleWidget",
    "name": "Keyboard inaccessible widget",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A widget that is declared to be clickable but not declared to be focusable is\u003cbr /\u003e\nnot accessible via the keyboard. Please add the focusable attribute as well.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "accessibility",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "LabelFor",
    "name": "Missing labelFor attribute",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Text fields should be labelled with a labelFor attribute, provided your\u003cbr /\u003e\nminSdkVersion is at least 17.\u003cbr /\u003e\n\u003cbr /\u003e\nIf your view is labeled but by a label in a different layout which includes\u003cbr /\u003e\nthis one, just suppress this warning from lint.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "accessibility",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "LibraryCustomView",
    "name": "Custom views in libraries should use res-auto-namespace",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "When using a custom view with custom attributes in a library project, the\u003cbr /\u003e\nlayout must use the special namespace http://schemas.android.com/apk/res-auto\u003cbr /\u003e\ninstead of a URI which includes the library project\u0027s own package. This will\u003cbr /\u003e\nbe used to automatically adjust the namespace of the attributes when the\u003cbr /\u003e\nlibrary resources are merged into the application project.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "LocalSuppress",
    "name": "@SuppressLint on invalid element",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The @SuppressAnnotation is used to suppress Lint warnings in Java files.\u003cbr /\u003e\nHowever, while many lint checks analyzes the Java source code, where they can\u003cbr /\u003e\nfind annotations on (for example) local variables, some checks are analyzing\u003cbr /\u003e\nthe .class files. And in class files, annotations only appear on classes,\u003cbr /\u003e\nfields and methods. Annotations placed on local variables disappear. If you\u003cbr /\u003e\nattempt to suppress a lint error for a class-file based lint check, the\u003cbr /\u003e\nsuppress annotation not work. You must move the annotation out to the\u003cbr /\u003e\nsurrounding method.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "LocaleFolder",
    "name": "Wrong locale name",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "From the java.util.Locale documentation:\u003cbr /\u003e\n\u0026quot;Note that Java uses several deprecated two-letter codes. The Hebrew (\u0026quot;he\u0026quot;)\u003cbr /\u003e\nlanguage code is rewritten as \u0026quot;iw\u0026quot;, Indonesian (\u0026quot;id\u0026quot;) as \u0026quot;in\u0026quot;, and Yiddish\u003cbr /\u003e\n(\u0026quot;yi\u0026quot;) as \u0026quot;ji\u0026quot;. This rewriting happens even if you construct your own Locale\u003cbr /\u003e\nobject, not just for instances returned by the various lookup methods.\u003cbr /\u003e\n\u003cbr /\u003e\nBecause of this, if you add your localized resources in for example values-he\u003cbr /\u003e\nthey will not be used, since the system will look for values-iw instead.\u003cbr /\u003e\n\u003cbr /\u003e\nTo work around this, place your resources in a values folder using the\u003cbr /\u003e\ndeprecated language code instead.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/reference/java/util/Locale.html\"\u003ehttp://developer.android.com/reference/java/util/Locale.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "LogConditional",
    "name": "Unconditional Logging Calls",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable LogConditional\u003cbr /\u003e\n\u003cbr /\u003e\nThe BuildConfig class (available in Tools 17) provides a constant, \u0026quot;DEBUG\u0026quot;,\u003cbr /\u003e\nwhich indicates whether the code is being built in release mode or in debug\u003cbr /\u003e\nmode. In release mode, you typically want to strip out all the logging calls.\u003cbr /\u003e\nSince the compiler will automatically remove all code which is inside a \u0026quot;if\u003cbr /\u003e\n(false)\u0026quot; check, surrounding your logging calls with a check for\u003cbr /\u003e\nBuildConfig.DEBUG is a good idea.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you really intend for the logging to be present in release mode, you can\u003cbr /\u003e\nsuppress this warning with a @SuppressLint annotation for the intentional\u003cbr /\u003e\nlogging calls.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "LogTagMismatch",
    "name": "Mismatched Log Tags",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "When guarding a Log.v(tag, ...) call with Log.isLoggable(tag), the tag passed\u003cbr /\u003e\nto both calls should be the same. Similarly, the level passed in to\u003cbr /\u003e\nLog.isLoggable should typically match the type of Log call, e.g. if checking\u003cbr /\u003e\nlevel Log.DEBUG, the corresponding Log call should be Log.d, not Log.i.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "LongLogTag",
    "name": "Too Long Log Tags",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Log tags are only allowed to be at most 23 tag characters long.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MangledCRLF",
    "name": "Mangled file line endings",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable MangledCRLF\u003cbr /\u003e\n\u003cbr /\u003e\nOn Windows, line endings are typically recorded as carriage return plus\u003cbr /\u003e\nnewline: \\r\\n.\u003cbr /\u003e\n\u003cbr /\u003e\nThis detector looks for invalid line endings with repeated carriage return\u003cbr /\u003e\ncharacters (without newlines). Previous versions of the ADT plugin could\u003cbr /\u003e\naccidentally introduce these into the file, and when editing the file, the\u003cbr /\u003e\neditor could produce confusing visual artifacts.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d375421\"\u003ehttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d375421\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ManifestOrder",
    "name": "Incorrect order of elements in manifest",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The \u0026lt;application\u0026gt; tag should appear after the elements which declare which\u003cbr /\u003e\nversion you need, which features you need, which libraries you need, and so\u003cbr /\u003e\non. In the past there have been subtle bugs (such as themes not getting\u003cbr /\u003e\napplied correctly) when the \u0026lt;application\u0026gt; tag appears before some of these\u003cbr /\u003e\nother elements, so it\u0027s best to order your manifest in the logical dependency\u003cbr /\u003e\norder.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ManifestResource",
    "name": "Manifest Resource References",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Elements in the manifest can reference resources, but those resources cannot\u003cbr /\u003e\nvary across configurations (except as a special case, by version, and except\u003cbr /\u003e\nfor a few specific package attributes such as the application title and\u003cbr /\u003e\nicon.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ManifestTypo",
    "name": "Typos in manifest tags",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "This check looks through the manifest, and if it finds any tags that look like\u003cbr /\u003e\nlikely misspellings, they are flagged.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MenuTitle",
    "name": "Missing menu title",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "From the action bar documentation:\u003cbr /\u003e\n\u0026quot;It\u0027s important that you always define android:title for each menu item \u0026mdash; even\u003cbr /\u003e\nif you don\u0027t declare that the title appear with the action item \u0026mdash; for three\u003cbr /\u003e\nreasons:\u003cbr /\u003e\n\u003cbr /\u003e\n* If there\u0027s not enough room in the action bar for the action item, the menu\u003cbr /\u003e\nitem appears in the overflow menu and only the title appears.\u003cbr /\u003e\n* Screen readers for sight-impaired users read the menu item\u0027s title.\u003cbr /\u003e\n* If the action item appears with only the icon, a user can long-press the\u003cbr /\u003e\nitem to reveal a tool-tip that displays the action item\u0027s title.\u003cbr /\u003e\nThe android:icon is always optional, but recommended.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/ui/actionbar.html\"\u003ehttp://developer.android.com/guide/topics/ui/actionbar.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MergeMarker",
    "name": "Code contains merge marker",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Many version control systems leave unmerged files with markers such as \u0026lt;\u0026lt;\u0026lt; in\u003cbr /\u003e\nthe source code. This check looks for these markers, which are sometimes\u003cbr /\u003e\naccidentally left in, particularly in resource files where they don\u0027t break\u003cbr /\u003e\ncompilation.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MergeRootFrame",
    "name": "FrameLayout can be replaced with \u003cmerge\u003e tag",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If a \u0026lt;FrameLayout\u0026gt; is the root of a layout and does not provide background or\u003cbr /\u003e\npadding etc, it can often be replaced with a \u0026lt;merge\u0026gt; tag which is slightly\u003cbr /\u003e\nmore efficient. Note that this depends on context, so make sure you understand\u003cbr /\u003e\nhow the \u0026lt;merge\u0026gt; tag works before proceeding.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html\"\u003ehttp://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MinSdkTooLow",
    "name": "API Version Too Low",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable MinSdkTooLow\u003cbr /\u003e\n\u003cbr /\u003e\nThe value of the minSdkVersion property is too low and can be\u003cbr /\u003e\nincrementedwithout noticeably reducing the number of supported devices.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MipmapIcons",
    "name": "Use Mipmap Launcher Icons",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Launcher icons should be provided in the mipmap resource directory. This is\u003cbr /\u003e\nthe same as the drawable resource directory, except resources in the mipmap\u003cbr /\u003e\ndirectory will not get stripped out when creating density-specific APKs.\u003cbr /\u003e\n\u003cbr /\u003e\nIn certain cases, the Launcher app may use a higher resolution asset (than\u003cbr /\u003e\nwould normally be computed for the device) to display large app shortcuts. If\u003cbr /\u003e\ndrawables for densities other than the device\u0027s resolution have been stripped\u003cbr /\u003e\nout, then the app shortcut could appear blurry.\u003cbr /\u003e\n\u003cbr /\u003e\nTo fix this, move your launcher icons from `drawable-`dpi to `mipmap-`dpi and\u003cbr /\u003e\nchange references from @drawable/ and R.drawable to @mipmap/ and R.mipmap.\u003cbr /\u003e\nIn Android Studio this lint warning has a quickfix to perform this\u003cbr /\u003e\nautomatically.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingApplicationIcon",
    "name": "Missing application icon",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "You should set an icon for the application as whole because there is no\u003cbr /\u003e\ndefault. This attribute must be set as a reference to a drawable resource\u003cbr /\u003e\ncontaining the image (for example @drawable/icon).\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/tools/publishing/preparing.html#publishing-configure\"\u003ehttp://developer.android.com/tools/publishing/preparing.html#publishing-configure\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingBackupPin",
    "name": "Missing Backup Pin",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "It is highly recommended to declare a backup \u0026lt;pin\u0026gt; element. Not having a\u003cbr /\u003e\nsecond pin defined can cause connection failures when the particular site\u003cbr /\u003e\ncertificate is rotated and the app has not yet been updated.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/preview/features/security-config.html\"\u003ehttps://developer.android.com/preview/features/security-config.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingConstraints",
    "name": "Missing Constraints in ConstraintLayout",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "The layout editor allows you to place widgets anywhere on the canvas, and it\u003cbr /\u003e\nrecords the current position with designtime attributes (such as\u003cbr /\u003e\nlayout_editor_absoluteX.) These attributes are not applied at runtime, so if\u003cbr /\u003e\nyou push your layout on a device, the widgets may appear in a different\u003cbr /\u003e\nlocation than shown in the editor. To fix this, make sure a widget has both\u003cbr /\u003e\nhorizontal and vertical constraints by dragging from the edge connections.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingFirebaseInstanceTokenRefresh",
    "name": "Missing Firebase Instance ID Token Refresh",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Apps that check the Firebase Instance ID should usually implement the\u003cbr /\u003e\nFirebaseInstanceIdService#onTokenRefresh() callback in order to observe\u003cbr /\u003e\nchanges.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://firebase.google.com/docs/cloud-messaging/android/client#monitor-token-generation\"\u003ehttps://firebase.google.com/docs/cloud-messaging/android/client#monitor-token-generation\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingId",
    "name": "Fragments should specify an id or tag",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If you do not specify an android:id or an android:tag attribute on a\u003cbr /\u003e\n\u0026lt;fragment\u0026gt; element, then if the activity is restarted (for example for an\u003cbr /\u003e\norientation rotation) you may lose state. From the fragment documentation:\u003cbr /\u003e\n\u003cbr /\u003e\n\u0026quot;Each fragment requires a unique identifier that the system can use to restore\u003cbr /\u003e\nthe fragment if the activity is restarted (and which you can use to capture\u003cbr /\u003e\nthe fragment to perform transactions, such as remove it).\u003cbr /\u003e\n\u003cbr /\u003e\n* Supply the android:id attribute with a unique ID.\u003cbr /\u003e\n* Supply the android:tag attribute with a unique string.\u003cbr /\u003e\nIf you provide neither of the previous two, the system uses the ID of the\u003cbr /\u003e\ncontainer view.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/components/fragments.html\"\u003ehttp://developer.android.com/guide/components/fragments.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingIntentFilterForMediaSearch",
    "name": "Missing intent-filter with action android.media.action.MEDIA_PLAY_FROM_SEARCH",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "To support voice searches on Android Auto, you should also register an\u003cbr /\u003e\nintent-filter for the action android.media.action.MEDIA_PLAY_FROM_SEARCH.\u003cbr /\u003e\nTo do this, add\u003cbr /\u003e\n\u0026lt;intent-filter\u0026gt;\u003cbr /\u003e\n    \u0026lt;action android:name\u003d\u0026quot;android.media.action.MEDIA_PLAY_FROM_SEARCH\u0026quot; /\u0026gt;\u003cbr /\u003e\n\u0026lt;/intent-filter\u0026gt;\u003cbr /\u003e\nto your \u0026lt;activity\u0026gt; or \u0026lt;service\u0026gt;.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/auto/audio/index.html#support_voice\"\u003ehttps://developer.android.com/training/auto/audio/index.html#support_voice\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingLeanbackLauncher",
    "name": "Missing Leanback Launcher Intent Filter.",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "An application intended to run on TV devices must declare a launcher activity\u003cbr /\u003e\nfor TV in its manifest using a android.intent.category.LEANBACK_LAUNCHER\u003cbr /\u003e\nintent filter.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/tv/start/start.html#tv-activity\"\u003ehttps://developer.android.com/training/tv/start/start.html#tv-activity\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingLeanbackSupport",
    "name": "Missing Leanback Support.",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "The manifest should declare the use of the Leanback user interface required by\u003cbr /\u003e\nAndroid TV.\u003cbr /\u003e\nTo fix this, add\u003cbr /\u003e\n\u0026lt;uses-feature android:name\u003d\u0026quot;android.software.leanback\u0026quot;  \u003cbr /\u003e\nandroid:required\u003d\u0026quot;false\u0026quot; /\u0026gt;\u003cbr /\u003e\nto your manifest.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/tv/start/start.html#leanback-req\"\u003ehttps://developer.android.com/training/tv/start/start.html#leanback-req\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingMediaBrowserServiceIntentFilter",
    "name": "Missing intent-filter with action android.media.browse.MediaBrowserService.",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "An Automotive Media App requires an exported service that extends\u003cbr /\u003e\nandroid.service.media.MediaBrowserService with an intent-filter for the action\u003cbr /\u003e\nandroid.media.browse.MediaBrowserService to be able to browse and play media.\u003cbr /\u003e\nTo do this, add\u003cbr /\u003e\n\u0026lt;intent-filter\u0026gt;\u003cbr /\u003e\n    \u0026lt;action android:name\u003d\u0026quot;android.media.browse.MediaBrowserService\u0026quot; /\u0026gt;\u003cbr /\u003e\n\u0026lt;/intent-filter\u0026gt;\u003cbr /\u003e\n to the service that extends android.service.media.MediaBrowserService\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/auto/audio/index.html#config_manifest\"\u003ehttps://developer.android.com/training/auto/audio/index.html#config_manifest\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingOnPlayFromSearch",
    "name": "Missing onPlayFromSearch.",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "To support voice searches on Android Auto, in addition to adding an\u003cbr /\u003e\nintent-filter for the action onPlayFromSearch, you also need to override and\u003cbr /\u003e\nimplement onPlayFromSearch(String query, Bundle bundle)\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/auto/audio/index.html#support_voice\"\u003ehttps://developer.android.com/training/auto/audio/index.html#support_voice\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingPermission",
    "name": "Missing Permissions",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "This check scans through your code and libraries and looks at the APIs being\u003cbr /\u003e\nused, and checks this against the set of permissions required to access those\u003cbr /\u003e\nAPIs. If the code using those APIs is called at runtime, then the program will\u003cbr /\u003e\ncrash.\u003cbr /\u003e\n\u003cbr /\u003e\nFurthermore, for permissions that are revocable (with targetSdkVersion 23),\u003cbr /\u003e\nclient code must also be prepared to handle the calls throwing an exception if\u003cbr /\u003e\nthe user rejects the request for permission at runtime.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingPrefix",
    "name": "Missing Android XML namespace",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Most Android views have attributes in the Android namespace. When referencing\u003cbr /\u003e\nthese attributes you must include the namespace prefix, or your attribute will\u003cbr /\u003e\nbe interpreted by aapt as just a custom attribute.\u003cbr /\u003e\n\u003cbr /\u003e\nSimilarly, in manifest files, nearly all attributes should be in the android:\u003cbr /\u003e\nnamespace.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingQuantity",
    "name": "Missing quantity translation",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Different languages have different rules for grammatical agreement with\u003cbr /\u003e\nquantity. In English, for example, the quantity 1 is a special case. We write\u003cbr /\u003e\n\u0026quot;1 book\u0026quot;, but for any other quantity we\u0027d write \u0026quot;n books\u0026quot;. This distinction\u003cbr /\u003e\nbetween singular and plural is very common, but other languages make finer\u003cbr /\u003e\ndistinctions.\u003cbr /\u003e\n\u003cbr /\u003e\nThis lint check looks at each translation of a \u0026lt;plural\u0026gt; and makes sure that\u003cbr /\u003e\nall the quantity strings considered by the given language are provided by this\u003cbr /\u003e\ntranslation.\u003cbr /\u003e\n\u003cbr /\u003e\nFor example, an English translation must provide a string for quantity\u003d\u0026quot;one\u0026quot;.\u003cbr /\u003e\nSimilarly, a Czech translation must provide a string for quantity\u003d\u0026quot;few\u0026quot;.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/resources/string-resource.html#Plurals\"\u003ehttp://developer.android.com/guide/topics/resources/string-resource.html#Plurals\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingRegistered",
    "name": "Missing registered class",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable MissingRegistered\u003cbr /\u003e\n\u003cbr /\u003e\nIf a class is referenced in the manifest or in a layout file, it must also\u003cbr /\u003e\nexist in the project (or in one of the libraries included by the project. This\u003cbr /\u003e\ncheck helps uncover typos in registration names, or attempts to rename or move\u003cbr /\u003e\nclasses without updating the manifest file properly.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/manifest/manifest-intro.html\"\u003ehttp://developer.android.com/guide/topics/manifest/manifest-intro.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingSuperCall",
    "name": "Missing Super Call",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Some methods, such as View#onDetachedFromWindow, require that you also call\u003cbr /\u003e\nthe super\u003cbr /\u003e\nimplementation as part of your method.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingTranslation",
    "name": "Incomplete translation",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "If an application has more than one locale, then all the strings declared in\u003cbr /\u003e\none language should also be translated in all other languages.\u003cbr /\u003e\n\u003cbr /\u003e\nIf the string should not be translated, you can add the attribute\u003cbr /\u003e\ntranslatable\u003d\u0026quot;false\u0026quot; on the \u0026lt;string\u0026gt; element, or you can define all your\u003cbr /\u003e\nnon-translatable strings in a resource file called donottranslate.xml. Or, you\u003cbr /\u003e\ncan ignore the issue with a tools:ignore\u003d\u0026quot;MissingTranslation\u0026quot; attribute.\u003cbr /\u003e\n\u003cbr /\u003e\nBy default this detector allows regions of a language to just provide a subset\u003cbr /\u003e\nof the strings and fall back to the standard language strings. You can require\u003cbr /\u003e\nall regions to provide a full translation by setting the environment variable\u003cbr /\u003e\nANDROID_LINT_COMPLETE_REGIONS.\u003cbr /\u003e\n\u003cbr /\u003e\nYou can tell lint (and other tools) which language is the default language in\u003cbr /\u003e\nyour res/values/ folder by specifying tools:locale\u003d\u0026quot;languageCode\u0026quot; for the root\u003cbr /\u003e\n\u0026lt;resources\u0026gt; element in your resource file. (The tools prefix refers to the\u003cbr /\u003e\nnamespace declaration http://schemas.android.com/tools.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingTvBanner",
    "name": "TV Missing Banner",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "A TV application must provide a home screen banner for each localization if it\u003cbr /\u003e\nincludes a Leanback launcher intent filter. The banner is the app launch point\u003cbr /\u003e\nthat appears on the home screen in the apps and games rows.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/training/tv/start/start.html#banner\"\u003ehttp://developer.android.com/training/tv/start/start.html#banner\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MissingVersion",
    "name": "Missing application name/version",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "You should define the version information for your application.\u003cbr /\u003e\nandroid:versionCode: An integer value that represents the version of the\u003cbr /\u003e\napplication code, relative to other versions.\u003cbr /\u003e\n\u003cbr /\u003e\nandroid:versionName: A string value that represents the release version of the\u003cbr /\u003e\napplication code, as it should be shown to users.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/tools/publishing/versioning.html#appversioning\"\u003ehttp://developer.android.com/tools/publishing/versioning.html#appversioning\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MockLocation",
    "name": "Using mock location provider in production",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Using a mock location provider (by requiring the permission\u003cbr /\u003e\nandroid.permission.ACCESS_MOCK_LOCATION) should only be done in debug builds\u003cbr /\u003e\n(or from tests). In Gradle projects, that means you should only request this\u003cbr /\u003e\npermission in a test or debug source set specific manifest file.\u003cbr /\u003e\n\u003cbr /\u003e\nTo fix this, create a new manifest file in the debug folder and move the\u003cbr /\u003e\n\u0026lt;uses-permission\u0026gt; element there. A typical path to a debug manifest override\u003cbr /\u003e\nfile in a Gradle project is src/debug/AndroidManifest.xml.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "MultipleUsesSdk",
    "name": "Multiple \u003cuses-sdk\u003e elements in the manifest",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "The \u0026lt;uses-sdk\u0026gt; element should appear just once; the tools will not merge the\u003cbr /\u003e\ncontents of all the elements so if you split up the attributes across multiple\u003cbr /\u003e\nelements, only one of them will take effect. To fix this, just merge all the\u003cbr /\u003e\nattributes from the various elements into a single \u0026lt;uses-sdk\u0026gt; element.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/manifest/uses-sdk-element.html\"\u003ehttp://developer.android.com/guide/topics/manifest/uses-sdk-element.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NamespaceTypo",
    "name": "Misspelled namespace declaration",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Accidental misspellings in namespace declarations can lead to some very\u003cbr /\u003e\nobscure error messages. This check looks for potential misspellings to help\u003cbr /\u003e\ntrack these down.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NegativeMargin",
    "name": "Negative Margins",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable NegativeMargin\u003cbr /\u003e\n\u003cbr /\u003e\nMargin values should be positive. Negative values are generally a sign that\u003cbr /\u003e\nyou are making assumptions about views surrounding the current one, or may be\u003cbr /\u003e\ntempted to turn off child clipping to allow a view to escape its parent.\u003cbr /\u003e\nTurning off child clipping to do this not only leads to poor graphical\u003cbr /\u003e\nperformance, it also results in wrong touch event handling since touch events\u003cbr /\u003e\nare based strictly on a chain of parent-rect hit tests. Finally, making\u003cbr /\u003e\nassumptions about the size of strings can lead to localization problems.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NestedScrolling",
    "name": "Nested scrolling widgets",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A scrolling widget such as a ScrollView should not contain any nested\u003cbr /\u003e\nscrolling widgets since this has various usability issues\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NestedWeights",
    "name": "Nested layout weights",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Layout weights require a widget to be measured twice. When a LinearLayout with\u003cbr /\u003e\nnon-zero weights is nested inside another LinearLayout with non-zero weights,\u003cbr /\u003e\nthen the number of measurements increase exponentially.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NetworkSecurityConfig",
    "name": "Valid Network Security Config File",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Ensures that a \u0026lt;network-security-config\u0026gt; file, which is pointed to by an\u003cbr /\u003e\nandroid:networkSecurityConfig attribute in the manifest file, is valid\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/preview/features/security-config.html\"\u003ehttps://developer.android.com/preview/features/security-config.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NewApi",
    "name": "Calling new methods on older versions",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "This check scans through all the Android API calls in the application and\u003cbr /\u003e\nwarns about any calls that are not available on all versions targeted by this\u003cbr /\u003e\napplication (according to its minimum SDK attribute in the manifest).\u003cbr /\u003e\n\u003cbr /\u003e\nIf you really want to use this API and don\u0027t need to support older devices\u003cbr /\u003e\njust set the minSdkVersion in your build.gradle or AndroidManifest.xml files.\u003cbr /\u003e\n\u003cbr /\u003e\nIf your code is deliberately accessing newer APIs, and you have ensured (e.g.\u003cbr /\u003e\nwith conditional execution) that this code will only ever be called on a\u003cbr /\u003e\nsupported platform, then you can annotate your class or method with the\u003cbr /\u003e\n@TargetApi annotation specifying the local minimum SDK to apply, such as\u003cbr /\u003e\n@TargetApi(11), such that this check considers 11 rather than your manifest\u003cbr /\u003e\nfile\u0027s minimum SDK as the required API level.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you are deliberately setting android: attributes in style definitions, make\u003cbr /\u003e\nsure you place this in a values-vNN folder in order to avoid running into\u003cbr /\u003e\nruntime conflicts on certain devices where manufacturers have added custom\u003cbr /\u003e\nattributes whose ids conflict with the new ones on later platforms.\u003cbr /\u003e\n\u003cbr /\u003e\nSimilarly, you can use tools:targetApi\u003d\u0026quot;11\u0026quot; in an XML file to indicate that\u003cbr /\u003e\nthe element will only be inflated in an adequate context.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NewerVersionAvailable",
    "name": "Newer Library Versions Available",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable NewerVersionAvailable\u003cbr /\u003e\n\u003cbr /\u003e\nThis detector checks with a central repository to see if there are newer\u003cbr /\u003e\nversions available for the dependencies used by this project. This is similar\u003cbr /\u003e\nto the GradleDependency check, which checks for newer versions available in\u003cbr /\u003e\nthe Android SDK tools and libraries, but this works with any MavenCentral\u003cbr /\u003e\ndependency, and connects to the library every time, which makes it more\u003cbr /\u003e\nflexible but also much slower.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NfcTechWhitespace",
    "name": "Whitespace in NFC tech lists",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "In a \u0026lt;tech-list\u0026gt;, there can be whitespace around the \u0026lt;tech\u0026gt; elements,but not\u003cbr /\u003e\ninside them. This is because the code which reads in the tech list is\u003cbr /\u003e\ncurrently very strict and will include the whitespace as part of the name.\u003cbr /\u003e\n\u003cbr /\u003e\nIn other words, use \u0026lt;tech\u0026gt;name\u0026lt;/tech\u0026gt;, not \u0026lt;tech\u0026gt; name \u0026lt;/tech\u0026gt;.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://code.google.com/p/android/issues/detail?id\u003d65351\"\u003ehttps://code.google.com/p/android/issues/detail?id\u003d65351\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NotInterpolated",
    "name": "Incorrect Interpolation",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "To insert the value of a variable, you can use ${variable} inside a string\u003cbr /\u003e\nliteral, but only if you are using double quotes!\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://www.groovy-lang.org/syntax.html#_string_interpolation\"\u003ehttp://www.groovy-lang.org/syntax.html#_string_interpolation\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "NotSibling",
    "name": "RelativeLayout Invalid Constraints",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Layout constraints in a given RelativeLayout should reference other views\u003cbr /\u003e\nwithin the same relative layout (but not itself!)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ObjectAnimatorBinding",
    "name": "Incorrect ObjectAnimator Property",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This check cross references properties referenced by String from\u003cbr /\u003e\nObjectAnimator and PropertyValuesHolder method calls and ensures that the\u003cbr /\u003e\ncorresponding setter methods exist and have the right signatures.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ObsoleteLayoutParam",
    "name": "Obsolete layout params",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The given layout_param is not defined for the given layout, meaning it has no\u003cbr /\u003e\neffect. This usually happens when you change the parent layout or move view\u003cbr /\u003e\ncode around without updating the layout params. This will cause useless\u003cbr /\u003e\nattribute processing at runtime, and is misleading for others reading the\u003cbr /\u003e\nlayout so the parameter should be removed.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ObsoleteSdkInt",
    "name": "Obsolete SDK_INT Version Check",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check flags version checks that are not necessary, because the\u003cbr /\u003e\nminSdkVersion (or surrounding known API level) is already at least as high as\u003cbr /\u003e\nthe version checked for.\u003cbr /\u003e\n\u003cbr /\u003e\nSimilarly, it also looks for resources in -vNN folders, such as values-v14\u003cbr /\u003e\nwhere the version qualifier is less than or equal to the minSdkVersion, where\u003cbr /\u003e\nthe contents should be merged into the best folder.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "OldTargetApi",
    "name": "Target SDK attribute is not targeting latest version",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When your application runs on a version of Android that is more recent than\u003cbr /\u003e\nyour targetSdkVersion specifies that it has been tested with, various\u003cbr /\u003e\ncompatibility modes kick in. This ensures that your application continues to\u003cbr /\u003e\nwork, but it may look out of place. For example, if the targetSdkVersion is\u003cbr /\u003e\nless than 14, your app may get an option button in the UI.\u003cbr /\u003e\n\u003cbr /\u003e\nTo fix this issue, set the targetSdkVersion to the highest available value.\u003cbr /\u003e\nThen test your app to make sure everything works correctly. You may want to\u003cbr /\u003e\nconsult the compatibility notes to see what changes apply to each version you\u003cbr /\u003e\nare adding support for:\u003cbr /\u003e\nhttp://developer.android.com/reference/android/os/Build.VERSION_CODES.html\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/reference/android/os/Build.VERSION_CODES.html\"\u003ehttp://developer.android.com/reference/android/os/Build.VERSION_CODES.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "OnClick",
    "name": "onClick method does not exist",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "The onClick attribute value should be the name of a method in this View\u0027s\u003cbr /\u003e\ncontext to invoke when the view is clicked. This name must correspond to a\u003cbr /\u003e\npublic method that takes exactly one parameter of type View.\u003cbr /\u003e\n\u003cbr /\u003e\nMust be a string value, using \u0027\\;\u0027 to escape characters such as \u0027\\n\u0027 or\u003cbr /\u003e\n\u0027\\uxxxx\u0027 for a unicode character.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Orientation",
    "name": "Missing explicit orientation",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The default orientation of a LinearLayout is horizontal. It\u0027s pretty easy to\u003cbr /\u003e\nbelieve that the layout is vertical, add multiple children to it, and wonder\u003cbr /\u003e\nwhy only the first child is visible (when the subsequent children are off\u003cbr /\u003e\nscreen to the right). This lint rule helps pinpoint this issue by warning\u003cbr /\u003e\nwhenever a LinearLayout is used with an implicit orientation and multiple\u003cbr /\u003e\nchildren.\u003cbr /\u003e\n\u003cbr /\u003e\nIt also checks for empty LinearLayouts without an orientation attribute that\u003cbr /\u003e\nalso defines an id attribute. This catches the scenarios where children will\u003cbr /\u003e\nbe added to the LinearLayout dynamically.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Overdraw",
    "name": "Overdraw: Painting regions more than once",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If you set a background drawable on a root view, then you should use a custom\u003cbr /\u003e\ntheme where the theme background is null. Otherwise, the theme background will\u003cbr /\u003e\nbe painted first, only to have your custom background completely cover it;\u003cbr /\u003e\nthis is called \u0026quot;overdraw\u0026quot;.\u003cbr /\u003e\n\u003cbr /\u003e\nNOTE: This detector relies on figuring out which layouts are associated with\u003cbr /\u003e\nwhich activities based on scanning the Java code, and it\u0027s currently doing\u003cbr /\u003e\nthat using an inexact pattern matching algorithm. Therefore, it can\u003cbr /\u003e\nincorrectly conclude which activity the layout is associated with and then\u003cbr /\u003e\nwrongly complain that a background-theme is hidden.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you want your custom background on multiple pages, then you should consider\u003cbr /\u003e\nmaking a custom theme with your custom background and just using that theme\u003cbr /\u003e\ninstead of a root element background.\u003cbr /\u003e\n\u003cbr /\u003e\nOf course it\u0027s possible that your custom drawable is translucent and you want\u003cbr /\u003e\nit to be mixed with the background. However, you will get better performance\u003cbr /\u003e\nif you pre-mix the background with your drawable and use that resulting image\u003cbr /\u003e\nor color as a custom theme background instead.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Override",
    "name": "Method conflicts with new inherited method",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Suppose you are building against Android API 8, and you\u0027ve subclassed\u003cbr /\u003e\nActivity. In your subclass you add a new method called isDestroyed(). At some\u003cbr /\u003e\nlater point, a method of the same name and signature is added to Android. Your\u003cbr /\u003e\nmethod will now override the Android method, and possibly break its contract.\u003cbr /\u003e\nYour method is not calling super.isDestroyed(), since your compilation target\u003cbr /\u003e\ndoesn\u0027t know about the method.\u003cbr /\u003e\n\u003cbr /\u003e\nThe above scenario is what this lint detector looks for. The above example is\u003cbr /\u003e\nreal, since isDestroyed() was added in API 17, but it will be true for any\u003cbr /\u003e\nmethod you have added to a subclass of an Android class where your build\u003cbr /\u003e\ntarget is lower than the version the method was introduced in.\u003cbr /\u003e\n\u003cbr /\u003e\nTo fix this, either rename your method, or if you are really trying to augment\u003cbr /\u003e\nthe builtin method if available, switch to a higher build target where you can\u003cbr /\u003e\ndeliberately add @Override on your overriding method, and call super if\u003cbr /\u003e\nappropriate etc.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "OverrideAbstract",
    "name": "Not overriding abstract methods on older platforms",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "To improve the usability of some APIs, some methods that used to be abstract\u003cbr /\u003e\nhave been made concrete by adding default implementations. This means that\u003cbr /\u003e\nwhen compiling with new versions of the SDK, your code does not have to\u003cbr /\u003e\noverride these methods.\u003cbr /\u003e\n\u003cbr /\u003e\nHowever, if your code is also targeting older versions of the platform where\u003cbr /\u003e\nthese methods were still abstract, the code will crash. You must override all\u003cbr /\u003e\nmethods that used to be abstract in any versions targeted by your\u003cbr /\u003e\napplication\u0027s minSdkVersion.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PackageManagerGetSignatures",
    "name": "Potential Multiple Certificate Exploit",
    "type": "CODE_SMELL",
    "severity": "INFO",
    "description": "Improper validation of app signatures could lead to issues where a malicious\u003cbr /\u003e\napp submits itself to the Play Store with both its real certificate and a fake\u003cbr /\u003e\ncertificate and gains access to functionality or information it shouldn\u0027t have\u003cbr /\u003e\ndue to another application only checking for the fake certificate and ignoring\u003cbr /\u003e\nthe rest. Please make sure to validate all signatures returned by this\u003cbr /\u003e\nmethod.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://bluebox.com/technical/android-fake-id-vulnerability/\"\u003ehttps://bluebox.com/technical/android-fake-id-vulnerability/\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PackagedPrivateKey",
    "name": "Packaged private key",
    "type": "VULNERABILITY",
    "severity": "CRITICAL",
    "description": "In general, you should not package private key files inside your app.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ParcelClassLoader",
    "name": "Default Parcel Class Loader",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The documentation for Parcel#readParcelable(ClassLoader) (and its variations)\u003cbr /\u003e\nsays that you can pass in null to pick up the default class loader. However,\u003cbr /\u003e\nthat ClassLoader is a system class loader and is not able to find classes in\u003cbr /\u003e\nyour own application.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you are writing your own classes into the Parcel (not just SDK classes like\u003cbr /\u003e\nString and so on), then you should supply a ClassLoader for your application\u003cbr /\u003e\ninstead; a simple way to obtain one is to just call\u003cbr /\u003e\ngetClass().getClassLoader() from your own class.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/reference/android/os/Parcel.html\"\u003ehttp://developer.android.com/reference/android/os/Parcel.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ParcelCreator",
    "name": "Missing Parcelable CREATOR field",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "According to the Parcelable interface documentation, \u0026quot;Classes implementing the\u003cbr /\u003e\nParcelable interface must also have a static field called CREATOR, which is an\u003cbr /\u003e\nobject implementing the Parcelable.Creator interface.\u0026quot;\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/reference/android/os/Parcelable.html\"\u003ehttp://developer.android.com/reference/android/os/Parcelable.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PendingBindings",
    "name": "Missing Pending Bindings",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "When using a ViewDataBinding in a onBindViewHolder method, you must call\u003cbr /\u003e\nexecutePendingBindings() before the method exits; otherwise the data binding\u003cbr /\u003e\nruntime will update the UI in the next animation frame causing a delayed\u003cbr /\u003e\nupdate and potential jumps if the item resizes.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PermissionImpliesUnsupportedChromeOsHardware",
    "name": "Permission Implies Unsupported Chrome OS Hardware",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable PermissionImpliesUnsupportedChromeOsHardware\u003cbr /\u003e\n\u003cbr /\u003e\nThe \u0026lt;uses-permission\u0026gt; element should not require a permission that implies an\u003cbr /\u003e\nunsupported Chrome OS hardware feature. Google Play assumes that certain\u003cbr /\u003e\nhardware related permissions indicate that the underlying hardware features\u003cbr /\u003e\nare required by default. To fix the issue, consider declaring the\u003cbr /\u003e\ncorresponding uses-feature element with required\u003d\u0026quot;false\u0026quot; attribute.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/topic/arc/manifest.html#implied-features\"\u003ehttps://developer.android.com/topic/arc/manifest.html#implied-features\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PermissionImpliesUnsupportedHardware",
    "name": "Permission Implies Unsupported Hardware",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The \u0026lt;uses-permission\u0026gt; element should not require a permission that implies an\u003cbr /\u003e\nunsupported TV hardware feature. Google Play assumes that certain hardware\u003cbr /\u003e\nrelated permissions indicate that the underlying hardware features are\u003cbr /\u003e\nrequired by default. To fix the issue, consider declaring the corresponding\u003cbr /\u003e\nuses-feature element with required\u003d\u0026quot;false\u0026quot; attribute.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions\"\u003ehttp://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PinSetExpiry",
    "name": "Validate \u003cpin-set\u003e expiration attribute",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Ensures that the expiration attribute of the \u0026lt;pin-set\u0026gt; element is valid and\u003cbr /\u003e\nhas not already expired or is expiring soon\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/preview/features/security-config.html\"\u003ehttps://developer.android.com/preview/features/security-config.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PluralsCandidate",
    "name": "Potential Plurals",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This lint check looks for potential errors in internationalization where you\u003cbr /\u003e\nhave translated a message which involves a quantity and it looks like other\u003cbr /\u003e\nparts of the string may need grammatical changes.\u003cbr /\u003e\n\u003cbr /\u003e\nFor example, rather than something like this:\u003cbr /\u003e\n  \u0026lt;string name\u003d\u0026quot;try_again\u0026quot;\u0026gt;Try again in %d seconds.\u0026lt;/string\u0026gt;\u003cbr /\u003e\nyou should be using a plural:\u003cbr /\u003e\n   \u0026lt;plurals name\u003d\u0026quot;try_again\u0026quot;\u0026gt;\u003cbr /\u003e\n        \u0026lt;item quantity\u003d\u0026quot;one\u0026quot;\u0026gt;Try again in %d second\u0026lt;/item\u0026gt;\u003cbr /\u003e\n        \u0026lt;item quantity\u003d\u0026quot;other\u0026quot;\u0026gt;Try again in %d seconds\u0026lt;/item\u0026gt;\u003cbr /\u003e\n    \u0026lt;/plurals\u0026gt;\u003cbr /\u003e\nThis will ensure that in other languages the right set of translations are\u003cbr /\u003e\nprovided for the different quantity classes.\u003cbr /\u003e\n\u003cbr /\u003e\n(This check depends on some heuristics, so it may not accurately determine\u003cbr /\u003e\nwhether a string really should be a quantity. You can use tools:ignore to\u003cbr /\u003e\nfilter out false positives.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/resources/string-resource.html#Plurals\"\u003ehttp://developer.android.com/guide/topics/resources/string-resource.html#Plurals\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PrivateApi",
    "name": "Using Private APIs",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Using reflection to access hidden/private Android APIs is not safe; it will\u003cbr /\u003e\noften not work on devices from other vendors, and it may suddenly stop working\u003cbr /\u003e\n(if the API is removed) or crash spectacularly (if the API behavior changes,\u003cbr /\u003e\nsince there are no guarantees for compatibility.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PrivateResource",
    "name": "Using private resources",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Private resources should not be referenced; the may not be present everywhere,\u003cbr /\u003e\nand even where they are they may disappear without notice.\u003cbr /\u003e\n\u003cbr /\u003e\nTo fix this, copy the resource into your own project instead.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Proguard",
    "name": "Using obsolete ProGuard configuration",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Using -keepclasseswithmembernames in a proguard config file is not correct; it\u003cbr /\u003e\ncan cause some symbols to be renamed which should not be.\u003cbr /\u003e\nEarlier versions of ADT used to create proguard.cfg files with the wrong\u003cbr /\u003e\nformat. Instead of -keepclasseswithmembernames use -keepclasseswithmembers,\u003cbr /\u003e\nsince the old flags also implies \u0026quot;allow shrinking\u0026quot; which means symbols only\u003cbr /\u003e\nreferred to from XML and not Java (such as possibly CustomViews) can get\u003cbr /\u003e\ndeleted.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://http://code.google.com/p/android/issues/detail?id\u003d16384\"\u003ehttp://http://code.google.com/p/android/issues/detail?id\u003d16384\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ProguardSplit",
    "name": "Proguard.cfg file contains generic Android rules",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Earlier versions of the Android tools bundled a single proguard.cfg file\u003cbr /\u003e\ncontaining a ProGuard configuration file suitable for Android shrinking and\u003cbr /\u003e\nobfuscation. However, that version was copied into new projects, which means\u003cbr /\u003e\nthat it does not continue to get updated as we improve the default ProGuard\u003cbr /\u003e\nrules for Android.\u003cbr /\u003e\n\u003cbr /\u003e\nIn the new version of the tools, we have split the ProGuard configuration into\u003cbr /\u003e\ntwo halves:\u003cbr /\u003e\n* A simple configuration file containing only project-specific flags, in your\u003cbr /\u003e\nproject\u003cbr /\u003e\n* A generic configuration file containing the recommended set of ProGuard\u003cbr /\u003e\noptions for Android projects. This generic file lives in the SDK install\u003cbr /\u003e\ndirectory which means that it gets updated along with the tools.\u003cbr /\u003e\n\u003cbr /\u003e\nIn order for this to work, the proguard.config property in the\u003cbr /\u003e\nproject.properties file now refers to a path, so you can reference both the\u003cbr /\u003e\ngeneric file as well as your own (and any additional files too).\u003cbr /\u003e\n\u003cbr /\u003e\nTo migrate your project to the new setup, create a new proguard-project.txt\u003cbr /\u003e\nfile in your project containing any project specific ProGuard flags as well as\u003cbr /\u003e\nany customizations you have made, then update your project.properties file to\u003cbr /\u003e\ncontain:\u003cbr /\u003e\nproguard.config\u003d${sdk.dir}/tools/proguard/proguard-android.txt:proguard-projec\u003cbr /\u003e\nt.txt\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PropertyEscape",
    "name": "Incorrect property escapes",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "All backslashes and colons in .property files must be escaped with a backslash\u003cbr /\u003e\n(). This means that when writing a Windows path, you must escape the file\u003cbr /\u003e\nseparators, so the path MyFiles should be written as key\u003d\\\\My\\\\Files.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ProtectedPermissions",
    "name": "Using system app permission",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Permissions with the protection level signature or signatureOrSystem are only\u003cbr /\u003e\ngranted to system apps. If an app is a regular non-system app, it will never\u003cbr /\u003e\nbe able to use these permissions.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "PxUsage",
    "name": "Using \u0027px\u0027 dimension",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "For performance reasons and to keep the code simpler, the Android system uses\u003cbr /\u003e\npixels as the standard unit for expressing dimension or coordinate values.\u003cbr /\u003e\nThat means that the dimensions of a view are always expressed in the code\u003cbr /\u003e\nusing pixels, but always based on the current screen density. For instance, if\u003cbr /\u003e\nmyView.getWidth() returns 10, the view is 10 pixels wide on the current\u003cbr /\u003e\nscreen, but on a device with a higher density screen, the value returned might\u003cbr /\u003e\nbe 15. If you use pixel values in your application code to work with bitmaps\u003cbr /\u003e\nthat are not pre-scaled for the current screen density, you might need to\u003cbr /\u003e\nscale the pixel values that you use in your code to match the un-scaled bitmap\u003cbr /\u003e\nsource.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/practices/screens_support.html#screen-independence\"\u003ehttp://developer.android.com/guide/practices/screens_support.html#screen-independence\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Range",
    "name": "Outside Range",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Some parameters are required to in a particular numerical range; this check\u003cbr /\u003e\nmakes sure that arguments passed fall within the range. For arrays, Strings\u003cbr /\u003e\nand collections this refers to the size or length.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Recycle",
    "name": "Missing recycle() calls",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Many resources, such as TypedArrays, VelocityTrackers, etc., should be\u003cbr /\u003e\nrecycled (with a recycle() call) after use. This lint check looks for missing\u003cbr /\u003e\nrecycle() calls.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RecyclerView",
    "name": "RecyclerView Problems",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "RecyclerView will not call onBindViewHolder again when the position of the\u003cbr /\u003e\nitem changes in the data set unless the item itself is invalidated or the new\u003cbr /\u003e\nposition cannot be determined.\u003cbr /\u003e\n\u003cbr /\u003e\nFor this reason, you should only use the position parameter while acquiring\u003cbr /\u003e\nthe related data item inside this method, and should not keep a copy of it.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you need the position of an item later on (e.g. in a click listener), use\u003cbr /\u003e\ngetAdapterPosition() which will have the updated adapter position.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ReferenceType",
    "name": "Incorrect reference types",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "When you generate a resource alias, the resource you are pointing to must be\u003cbr /\u003e\nof the same type as the alias\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Registered",
    "name": "Class is not registered in the manifest",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable Registered\u003cbr /\u003e\n\u003cbr /\u003e\nActivities, services and content providers should be registered in the\u003cbr /\u003e\nAndroidManifest.xml file using \u0026lt;activity\u0026gt;, \u0026lt;service\u0026gt; and \u0026lt;provider\u0026gt; tags.\u003cbr /\u003e\n\u003cbr /\u003e\nIf your activity is simply a parent class intended to be subclassed by other\u003cbr /\u003e\n\u0026quot;real\u0026quot; activities, make it an abstract class.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/manifest/manifest-intro.html\"\u003ehttp://developer.android.com/guide/topics/manifest/manifest-intro.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RelativeOverlap",
    "name": "Overlapping items in RelativeLayout",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If relative layout has text or button items aligned to left and right sides\u003cbr /\u003e\nthey can overlap each other due to localized text expansion unless they have\u003cbr /\u003e\nmutual constraints like toEndOf/toStartOf.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\nInternationalization:Bidirectional Text\u003cbr /\u003e\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003cbr /\u003e\n",
    "tags": [
      "android",
      "i18n"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RequiredSize",
    "name": "Missing layout_width or layout_height attributes",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "All views must specify an explicit layout_width and layout_height attribute.\u003cbr /\u003e\nThere is a runtime check for this, so if you fail to specify a size, an\u003cbr /\u003e\nexception is thrown at runtime.\u003cbr /\u003e\n\u003cbr /\u003e\nIt\u0027s possible to specify these widths via styles as well. GridLayout, as a\u003cbr /\u003e\nspecial case, does not require you to specify a size.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ResAuto",
    "name": "Hardcoded Package in Namespace",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "In Gradle projects, the actual package used in the final APK can vary; for\u003cbr /\u003e\nexample,you can add a .debug package suffix in one version and not the other.\u003cbr /\u003e\nTherefore, you should not hardcode the application package in the resource;\u003cbr /\u003e\ninstead, use the special namespace http://schemas.android.com/apk/res-auto\u003cbr /\u003e\nwhich will cause the tools to figure out the right namespace for the resource\u003cbr /\u003e\nregardless of the actual package used during the build.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ResourceAsColor",
    "name": "Should pass resolved color instead of resource id",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Methods that take a color in the form of an integer should be passed an RGB\u003cbr /\u003e\ntriple, not the actual color resource id. You must call\u003cbr /\u003e\ngetResources().getColor(resource) to resolve the actual color value first.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ResourceCycle",
    "name": "Cycle in resource definitions",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "There should be no cycles in resource definitions as this can lead to runtime\u003cbr /\u003e\nexceptions.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ResourceName",
    "name": "Resource with Wrong Prefix",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "In Gradle projects you can specify a resource prefix that all resources in the\u003cbr /\u003e\nproject must conform to. This makes it easier to ensure that you don\u0027t\u003cbr /\u003e\naccidentally combine resources from different libraries, since they all end up\u003cbr /\u003e\nin the same shared app namespace.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ResourceType",
    "name": "Wrong Resource Type",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Ensures that resource id\u0027s passed to APIs are of the right type; for example,\u003cbr /\u003e\ncalling Resources.getColor(R.string.name) is wrong.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RestrictedApi",
    "name": "Restricted API",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This API has been flagged with a restriction that has not been met.\u003cbr /\u003e\n\u003cbr /\u003e\nExamples of API restrictions:\u003cbr /\u003e\n* Method can only be invoked by a subclass\u003cbr /\u003e\n* Method can only be accessed from within the same library (defined by  the\u003cbr /\u003e\nGradle library group id)\u003cbr /\u003e\n.* Method can only be accessed from tests.\u003cbr /\u003e\n.\u003cbr /\u003e\nYou can add your own API restrictions with the @RestrictTo annotation.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RtlCompat",
    "name": "Right-to-left text compatibility issues",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "API 17 adds a textAlignment attribute to specify text alignment. However, if\u003cbr /\u003e\nyou are supporting older versions than API 17, you must also specify a gravity\u003cbr /\u003e\nor layout_gravity attribute, since older platforms will ignore the\u003cbr /\u003e\ntextAlignment attribute.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "i18n"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RtlEnabled",
    "name": "Using RTL attributes without enabling RTL support",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "To enable right-to-left support, when running on API 17 and higher, you must\u003cbr /\u003e\nset the android:supportsRtl attribute in the manifest \u0026lt;application\u0026gt; element.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you have started adding RTL attributes, but have not yet finished the\u003cbr /\u003e\nmigration, you can set the attribute to false to satisfy this lint check.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "i18n"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RtlHardcoded",
    "name": "Using left/right instead of start/end attributes",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Using Gravity#LEFT and Gravity#RIGHT can lead to problems when a layout is\u003cbr /\u003e\nrendered in locales where text flows from right to left. Use Gravity#START and\u003cbr /\u003e\nGravity#END instead. Similarly, in XML gravity and layout_gravity attributes,\u003cbr /\u003e\nuse start rather than left.\u003cbr /\u003e\n\u003cbr /\u003e\nFor XML attributes such as paddingLeft and layout_marginLeft, use paddingStart\u003cbr /\u003e\nand layout_marginStart. NOTE: If your minSdkVersion is less than 17, you\u003cbr /\u003e\nshould add both the older left/right attributes as well as the new start/right\u003cbr /\u003e\nattributes. On older platforms, where RTL is not supported and the start/right\u003cbr /\u003e\nattributes are unknown and therefore ignored, you need the older left/right\u003cbr /\u003e\nattributes. There is a separate lint check which catches that type of error.\u003cbr /\u003e\n\u003cbr /\u003e\n(Note: For Gravity#LEFT and Gravity#START, you can use these constants even\u003cbr /\u003e\nwhen targeting older platforms, because the start bitmask is a superset of the\u003cbr /\u003e\nleft bitmask. Therefore, you can use gravity\u003d\u0026quot;start\u0026quot; rather than\u003cbr /\u003e\ngravity\u003d\u0026quot;left|start\u0026quot;.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "i18n"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "RtlSymmetry",
    "name": "Padding and margin symmetry",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "If you specify padding or margin on the left side of a layout, you should\u003cbr /\u003e\nprobably also specify padding on the right side (and vice versa) for\u003cbr /\u003e\nright-to-left layout symmetry.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "i18n"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SQLiteString",
    "name": "Using STRING instead of TEXT",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "In SQLite, any column can store any data type; the declared type for a column\u003cbr /\u003e\nis more of a hint as to what the data should be cast to when stored.\u003cbr /\u003e\n\u003cbr /\u003e\nThere are many ways to store a string. TEXT, VARCHAR, CHARACTER and CLOB are\u003cbr /\u003e\nstring types, but `STRING` is not. Columns defined as STRING are actually\u003cbr /\u003e\nnumeric.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you try to store a value in a numeric column, SQLite will try to cast it to\u003cbr /\u003e\na float or an integer before storing. If it can\u0027t, it will just store it as a\u003cbr /\u003e\nstring.\u003cbr /\u003e\n\u003cbr /\u003e\nThis can lead to some subtle bugs. For example, when SQLite encounters a\u003cbr /\u003e\nstring like 1234567e1234, it will parse it as a float, but the result will be\u003cbr /\u003e\nout of range for floating point numbers, so Inf will be stored! Similarly,\u003cbr /\u003e\nstrings that look like integers will lose leading zeroes.\u003cbr /\u003e\n\u003cbr /\u003e\nTo fix this, you can change your schema to use a TEXT type instead.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://www.sqlite.org/datatype3.html\"\u003ehttps://www.sqlite.org/datatype3.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SSLCertificateSocketFactoryCreateSocket",
    "name": "Insecure call to SSLCertificateSocketFactory.createSocket()",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When SSLCertificateSocketFactory.createSocket() is called with an InetAddress\u003cbr /\u003e\nas the first parameter, TLS/SSL hostname verification is not performed, which\u003cbr /\u003e\ncould result in insecure network traffic caused by trusting arbitrary\u003cbr /\u003e\nhostnames in TLS/SSL certificates presented by peers. In this case, developers\u003cbr /\u003e\nmust ensure that the InetAddress is explicitly verified against the\u003cbr /\u003e\ncertificate through other means, such as by calling\u003cbr /\u003e\n`SSLCertificateSocketFactory.getDefaultHostnameVerifier() to get a\u003cbr /\u003e\nHostnameVerifier and calling HostnameVerifier.verify().\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SSLCertificateSocketFactoryGetInsecure",
    "name": "Call to SSLCertificateSocketFactory.getInsecure()",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The SSLCertificateSocketFactory.getInsecure() method returns an\u003cbr /\u003e\nSSLSocketFactory with all TLS/SSL security checks disabled, which could result\u003cbr /\u003e\nin insecure network traffic caused by trusting arbitrary TLS/SSL certificates\u003cbr /\u003e\npresented by peers. This method should be avoided unless needed for a special\u003cbr /\u003e\ncircumstance such as debugging. Instead,\u003cbr /\u003e\nSSLCertificateSocketFactory.getDefault() should be used.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ScrollViewCount",
    "name": "ScrollViews can have only one child",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "ScrollViews can only have one child widget. If you want more children, wrap\u003cbr /\u003e\nthem in a container layout.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ScrollViewSize",
    "name": "ScrollView size validation",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "ScrollView children must set their layout_width or layout_height attributes to\u003cbr /\u003e\nwrap_content rather than fill_parent or match_parent in the scrolling\u003cbr /\u003e\ndimension\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SdCardPath",
    "name": "Hardcoded reference to /sdcard",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Your code should not reference the /sdcard path directly; instead use\u003cbr /\u003e\nEnvironment.getExternalStorageDirectory().getPath().\u003cbr /\u003e\n\u003cbr /\u003e\nSimilarly, do not reference the /data/data/ path directly; it can vary in\u003cbr /\u003e\nmulti-user scenarios. Instead, use Context.getFilesDir().getPath().\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/data/data-storage.html#filesExternal\"\u003ehttp://developer.android.com/guide/topics/data/data-storage.html#filesExternal\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SecureRandom",
    "name": "Using a fixed seed with SecureRandom",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Specifying a fixed seed will cause the instance to return a predictable\u003cbr /\u003e\nsequence of numbers. This may be useful for testing but it is not appropriate\u003cbr /\u003e\nfor secure use.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/reference/java/security/SecureRandom.html\"\u003ehttp://developer.android.com/reference/java/security/SecureRandom.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SelectableText",
    "name": "Dynamic text should probably be selectable",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable SelectableText\u003cbr /\u003e\n\u003cbr /\u003e\nIf a \u0026lt;TextView\u0026gt; is used to display data, the user might want to copy that data\u003cbr /\u003e\nand paste it elsewhere. To allow this, the \u0026lt;TextView\u0026gt; should specify\u003cbr /\u003e\nandroid:textIsSelectable\u003d\u0026quot;true\u0026quot;.\u003cbr /\u003e\n\u003cbr /\u003e\nThis lint check looks for TextViews which are likely to be displaying data:\u003cbr /\u003e\nviews whose text is set dynamically. This value will be ignored on platforms\u003cbr /\u003e\nolder than API 11, so it is okay to set it regardless of your minSdkVersion.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ServiceCast",
    "name": "Wrong system service casts",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "When you call Context#getSystemService(), the result is typically cast to a\u003cbr /\u003e\nspecific interface. This lint check ensures that the cast is compatible with\u003cbr /\u003e\nthe expected type of the return value.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SetJavaScriptEnabled",
    "name": "Using setJavaScriptEnabled",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Your code should not invoke setJavaScriptEnabled if you are not sure that your\u003cbr /\u003e\napp really requires JavaScript support.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/practices/security.html\"\u003ehttp://developer.android.com/guide/practices/security.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SetTextI18n",
    "name": "TextView Internationalization",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When calling TextView#setText\u003cbr /\u003e\n* Never call Number#toString() to format numbers; it will not handle fraction\u003cbr /\u003e\nseparators and locale-specific digits properly. Consider using String#format\u003cbr /\u003e\nwith proper format specifications (%d or %f) instead.\u003cbr /\u003e\n* Do not pass a string literal (e.g. \u0026quot;Hello\u0026quot;) to display text. Hardcoded text\u003cbr /\u003e\ncan not be properly translated to other languages. Consider using Android\u003cbr /\u003e\nresource strings instead.\u003cbr /\u003e\n* Do not build messages by concatenating text chunks. Such messages can not be\u003cbr /\u003e\nproperly translated.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/resources/localization.html\"\u003ehttp://developer.android.com/guide/topics/resources/localization.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "i18n"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SetWorldReadable",
    "name": "File.setReadable() used to make file world-readable",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Setting files world-readable is very dangerous, and likely to cause security\u003cbr /\u003e\nholes in applications. It is strongly discouraged; instead, applications\u003cbr /\u003e\nshould use more formal mechanisms for interactions such as ContentProvider,\u003cbr /\u003e\nBroadcastReceiver, and Service.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SetWorldWritable",
    "name": "File.setWritable() used to make file world-writable",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Setting files world-writable is very dangerous, and likely to cause security\u003cbr /\u003e\nholes in applications. It is strongly discouraged; instead, applications\u003cbr /\u003e\nshould use more formal mechanisms for interactions such as ContentProvider,\u003cbr /\u003e\nBroadcastReceiver, and Service.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ShiftFlags",
    "name": "Dangerous Flag Constant Declaration",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When defining multiple constants for use in flags, the recommended style is to\u003cbr /\u003e\nuse the form 1 \u0026lt;\u0026lt; 2, 1 \u0026lt;\u0026lt; 3, 1 \u0026lt;\u0026lt; 4 and so on to ensure that the constants are\u003cbr /\u003e\nunique and non-overlapping.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ShortAlarm",
    "name": "Short or Frequent Alarm",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Frequent alarms are bad for battery life. As of API 22, the AlarmManager will\u003cbr /\u003e\noverride near-future and high-frequency alarm requests, delaying the alarm at\u003cbr /\u003e\nleast 5 seconds into the future and ensuring that the repeat interval is at\u003cbr /\u003e\nleast 60 seconds.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you really need to do work sooner than 5 seconds, post a delayed message or\u003cbr /\u003e\nrunnable to a Handler.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ShowToast",
    "name": "Toast created but not shown",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Toast.makeText() creates a Toast but does not show it. You must call show() on\u003cbr /\u003e\nthe resulting object to actually make the Toast appear.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SignatureOrSystemPermissions",
    "name": "signatureOrSystem permissions declared",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The signature protection level should probably be sufficient for most needs\u003cbr /\u003e\nand works regardless of where applications are installed. The\u003cbr /\u003e\nsignatureOrSystem level is used for certain situations where multiple vendors\u003cbr /\u003e\nhave applications built into a system image and need to share specific\u003cbr /\u003e\nfeatures explicitly because they are being built together.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SimpleDateFormat",
    "name": "Implied locale in date format",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Almost all callers should use getDateInstance(), getDateTimeInstance(), or\u003cbr /\u003e\ngetTimeInstance() to get a ready-made instance of SimpleDateFormat suitable\u003cbr /\u003e\nfor the user\u0027s locale. The main reason you\u0027d create an instance this class\u003cbr /\u003e\ndirectly is because you need to format/parse a specific machine-readable\u003cbr /\u003e\nformat, in which case you almost certainly want to explicitly ask for US to\u003cbr /\u003e\nensure that you get ASCII digits (rather than, say, Arabic digits).\u003cbr /\u003e\n\u003cbr /\u003e\nTherefore, you should either use the form of the SimpleDateFormat constructor\u003cbr /\u003e\nwhere you pass in an explicit locale, such as Locale.US, or use one of the get\u003cbr /\u003e\ninstance methods, or suppress this error if really know what you are doing.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/reference/java/text/SimpleDateFormat.html\"\u003ehttp://developer.android.com/reference/java/text/SimpleDateFormat.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SmallSp",
    "name": "Text size is too small",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Avoid using sizes smaller than 12sp.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SpUsage",
    "name": "Using dp instead of sp for text sizes",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When setting text sizes, you should normally use sp, or \u0026quot;scale-independent\u003cbr /\u003e\npixels\u0026quot;. This is like the dp unit, but it is also scaled by the user\u0027s font\u003cbr /\u003e\nsize preference. It is recommend you use this unit when specifying font sizes,\u003cbr /\u003e\nso they will be adjusted for both the screen density and the user\u0027s\u003cbr /\u003e\npreference.\u003cbr /\u003e\n\u003cbr /\u003e\nThere are cases where you might need to use dp; typically this happens when\u003cbr /\u003e\nthe text is in a container with a specific dp-size. This will prevent the text\u003cbr /\u003e\nfrom spilling outside the container. Note however that this means that the\u003cbr /\u003e\nuser\u0027s font size settings are not respected, so consider adjusting the layout\u003cbr /\u003e\nitself to be more flexible.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/training/multiscreen/screendensities.html\"\u003ehttp://developer.android.com/training/multiscreen/screendensities.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "StateListReachable",
    "name": "Unreachable state in a \u003cselector\u003e",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "In a selector, only the last child in the state list should omit a state\u003cbr /\u003e\nqualifier. If not, all subsequent items in the list will be ignored since the\u003cbr /\u003e\ngiven item will match all.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "StaticFieldLeak",
    "name": "Static Field Leaks",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A static field will leak contexts.\u003cbr /\u003e\n\u003cbr /\u003e\nNon-static inner classes have an implicit reference to their outer class. If\u003cbr /\u003e\nthat outer class is for example a Fragment or Activity, then this reference\u003cbr /\u003e\nmeans that the long-running handler/loader/task will hold a reference to the\u003cbr /\u003e\nactivity which prevents it from getting garbage collected.\u003cbr /\u003e\n\u003cbr /\u003e\nSimilarly, direct field references to activities and fragments from these\u003cbr /\u003e\nlonger running instances can cause leaks.\u003cbr /\u003e\n\u003cbr /\u003e\nViewModel classes should never point to Views or non-application Contexts.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "StopShip",
    "name": "Code contains STOPSHIP marker",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable StopShip\u003cbr /\u003e\n\u003cbr /\u003e\nUsing the comment // STOPSHIP can be used to flag code that is incomplete but\u003cbr /\u003e\nchecked in. This comment marker can be used to indicate that the code should\u003cbr /\u003e\nnot be shipped until the issue is addressed, and lint will look for these.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "StringEscaping",
    "name": "Invalid string escapes",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Apostrophes (\u0027) must always be escaped (with a \\), unless they appear in a\u003cbr /\u003e\nstring which is itself escaped in double quotes (\u0026quot;).\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "StringFormatCount",
    "name": "Formatting argument types incomplete or inconsistent",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When a formatted string takes arguments, it usually needs to reference the\u003cbr /\u003e\nsame arguments in all translations (or all arguments if there are no\u003cbr /\u003e\ntranslations.\u003cbr /\u003e\n\u003cbr /\u003e\nThere are cases where this is not the case, so this issue is a warning rather\u003cbr /\u003e\nthan an error by default. However, this usually happens when a language is not\u003cbr /\u003e\ntranslated or updated correctly.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "StringFormatInvalid",
    "name": "Invalid format string",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "If a string contains a \u0027%\u0027 character, then the string may be a formatting\u003cbr /\u003e\nstring which will be passed to String.format from Java code to replace each\u003cbr /\u003e\n\u0027%\u0027 occurrence with specific values.\u003cbr /\u003e\n\u003cbr /\u003e\nThis lint warning checks for two related problems:\u003cbr /\u003e\n(1) Formatting strings that are invalid, meaning that String.format will throw\u003cbr /\u003e\nexceptions at runtime when attempting to use the format string.\u003cbr /\u003e\n(2) Strings containing \u0027%\u0027 that are not formatting strings getting passed to a\u003cbr /\u003e\nString.format call. In this case the \u0027%\u0027 will need to be escaped as \u0027%%\u0027.\u003cbr /\u003e\n\u003cbr /\u003e\nNOTE: Not all Strings which look like formatting strings are intended for use\u003cbr /\u003e\nby String.format; for example, they may contain date formats intended for\u003cbr /\u003e\nandroid.text.format.Time#format(). Lint cannot always figure out that a String\u003cbr /\u003e\nis a date format, so you may get false warnings in those scenarios. See the\u003cbr /\u003e\nsuppress help topic for information on how to suppress errors in that case.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "StringFormatMatches",
    "name": "String.format string doesn\u0027t match the XML format string",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "This lint check ensures the following:\u003cbr /\u003e\n(1) If there are multiple translations of the format string, then all\u003cbr /\u003e\ntranslations use the same type for the same numbered arguments\u003cbr /\u003e\n(2) The usage of the format string in Java is consistent with the format\u003cbr /\u003e\nstring, meaning that the parameter types passed to String.format matches those\u003cbr /\u003e\nin the format string.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "StringShouldBeInt",
    "name": "String should be int",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "The properties compileSdkVersion, minSdkVersion and targetSdkVersion are\u003cbr /\u003e\nusually numbers, but can be strings when you are using an add-on (in the case\u003cbr /\u003e\nof compileSdkVersion) or a preview platform (for the other two properties).\u003cbr /\u003e\n\u003cbr /\u003e\nHowever, you can not use a number as a string (e.g. \u0026quot;19\u0026quot; instead of 19); that\u003cbr /\u003e\nwill result in a platform not found error message at build/sync time.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SupportAnnotationUsage",
    "name": "Incorrect support annotation usage",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "This lint check makes sure that the support annotations (such as @IntDef and\u003cbr /\u003e\n@ColorInt) are used correctly. For example, it\u0027s an error to specify an\u003cbr /\u003e\n@IntRange where the from value is higher than the to value.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\nCorrectness:Messages\u003cbr /\u003e\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Suspicious0dp",
    "name": "Suspicious 0dp dimension",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Using 0dp as the width in a horizontal LinearLayout with weights is a useful\u003cbr /\u003e\ntrick to ensure that only the weights (and not the intrinsic sizes) are used\u003cbr /\u003e\nwhen sizing the children.\u003cbr /\u003e\n\u003cbr /\u003e\nHowever, if you use 0dp for the opposite dimension, the view will be\u003cbr /\u003e\ninvisible. This can happen if you change the orientation of a layout without\u003cbr /\u003e\nalso flipping the 0dp dimension in all the children.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SuspiciousImport",
    "name": "\u0027import android.R\u0027 statement",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Importing android.R is usually not intentional; it sometimes happens when you\u003cbr /\u003e\nuse an IDE and ask it to automatically add imports at a time when your\u003cbr /\u003e\nproject\u0027s R class it not present.\u003cbr /\u003e\n\u003cbr /\u003e\nOnce the import is there you might get a lot of \u0026quot;confusing\u0026quot; error messages\u003cbr /\u003e\nbecause of course the fields available on android.R are not the ones you\u0027d\u003cbr /\u003e\nexpect from just looking at your own R class.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "SwitchIntDef",
    "name": "Missing @IntDef in Switch",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check warns if a switch statement does not explicitly include all the\u003cbr /\u003e\nvalues declared by the typedef @IntDef declaration.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TestAppLink",
    "name": "Unmatched URLs",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Using one or more tools:validation testUrl\u003d\u0026quot;some url\u0026quot;/\u0026gt; elements in your\u003cbr /\u003e\nmanifest allows the link attributes in your intent filter to be checked for\u003cbr /\u003e\nmatches.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TextFields",
    "name": "Missing inputType or hint",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Providing an inputType attribute on a text field improves usability because\u003cbr /\u003e\ndepending on the data to be input, optimized keyboards can be shown to the\u003cbr /\u003e\nuser (such as just digits and parentheses for a phone number). Similarly,a\u003cbr /\u003e\nhint attribute displays a hint to the user for what is expected in the text\u003cbr /\u003e\nfield.\u003cbr /\u003e\n\u003cbr /\u003e\nThe lint detector also looks at the id of the view, and if the id offers a\u003cbr /\u003e\nhint of the purpose of the field (for example, the id contains the phrase\u003cbr /\u003e\nphone or email), then lint will also ensure that the inputType contains the\u003cbr /\u003e\ncorresponding type attributes.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you really want to keep the text field generic, you can suppress this\u003cbr /\u003e\nwarning by setting inputType\u003d\u0026quot;text\u0026quot;.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TextViewEdits",
    "name": "TextView should probably be an EditText instead",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Using a \u0026lt;TextView\u0026gt; to input text is generally an error, you should be using\u003cbr /\u003e\n\u0026lt;EditText\u0026gt; instead.  EditText is a subclass of TextView, and some of the\u003cbr /\u003e\nediting support is provided by TextView, so it\u0027s possible to set some\u003cbr /\u003e\ninput-related properties on a TextView. However, using a TextView along with\u003cbr /\u003e\ninput attributes is usually a cut \u0026amp; paste error. To input text you should be\u003cbr /\u003e\nusing \u0026lt;EditText\u0026gt;.\u003cbr /\u003e\n\u003cbr /\u003e\nThis check also checks subclasses of TextView, such as Button and CheckBox,\u003cbr /\u003e\nsince these have the same issue: they should not be used with editable\u003cbr /\u003e\nattributes.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TooDeepLayout",
    "name": "Layout hierarchy is too deep",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Layouts with too much nesting is bad for performance. Consider using a flatter\u003cbr /\u003e\nlayout (such as RelativeLayout or GridLayout).The default maximum depth is 10\u003cbr /\u003e\nbut can be configured with the environment variable ANDROID_LINT_MAX_DEPTH.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TooManyViews",
    "name": "Layout has too many views",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Using too many views in a single layout is bad for performance. Consider using\u003cbr /\u003e\ncompound drawables or other tricks for reducing the number of views in this\u003cbr /\u003e\nlayout.\u003cbr /\u003e\n\u003cbr /\u003e\nThe maximum view count defaults to 80 but can be configured with the\u003cbr /\u003e\nenvironment variable ANDROID_LINT_MAX_VIEW_COUNT.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TrulyRandom",
    "name": "Weak RNG",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Key generation, signing, encryption, and random number generation may not\u003cbr /\u003e\nreceive cryptographically strong values due to improper initialization of the\u003cbr /\u003e\nunderlying PRNG on Android 4.3 and below.\u003cbr /\u003e\n\u003cbr /\u003e\nIf your application relies on cryptographically secure random number\u003cbr /\u003e\ngeneration you should apply the workaround described in\u003cbr /\u003e\nhttps://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.htm\u003cbr /\u003e\nl .\u003cbr /\u003e\n\u003cbr /\u003e\nThis lint rule is mostly informational; it does not accurately detect whether\u003cbr /\u003e\ncryptographically secure RNG is required, or whether the workaround has\u003cbr /\u003e\nalready been applied. After reading the blog entry and updating your code if\u003cbr /\u003e\nnecessary, you can disable this lint issue.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html\"\u003ehttps://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TrustAllX509TrustManager",
    "name": "Insecure TLS/SSL trust manager",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check looks for X509TrustManager implementations whose checkServerTrusted\u003cbr /\u003e\nor checkClientTrusted methods do nothing (thus trusting any certificate chain)\u003cbr /\u003e\nwhich could result in insecure network traffic caused by trusting arbitrary\u003cbr /\u003e\nTLS/SSL certificates presented by peers.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TypographyDashes",
    "name": "Hyphen can be replaced with dash",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The \u0026quot;n dash\u0026quot; (\u0026ndash;, \u0026amp;#8211;) and the \u0026quot;m dash\u0026quot; (\u0026mdash;, \u0026amp;#8212;) characters are used\u003cbr /\u003e\nfor ranges (n dash) and breaks (m dash). Using these instead of plain hyphens\u003cbr /\u003e\ncan make text easier to read and your application will look more polished.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://en.wikipedia.org/wiki/Dash\"\u003ehttp://en.wikipedia.org/wiki/Dash\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TypographyEllipsis",
    "name": "Ellipsis string can be replaced with ellipsis character",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "You can replace the string \u0026quot;...\u0026quot; with a dedicated ellipsis character, ellipsis\u003cbr /\u003e\ncharacter (\u0026hellip;, \u0026amp;#8230;). This can help make the text more readable.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://en.wikipedia.org/wiki/Ellipsis\"\u003ehttp://en.wikipedia.org/wiki/Ellipsis\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TypographyFractions",
    "name": "Fraction string can be replaced with fraction character",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "You can replace certain strings, such as 1/2, and 1/4, with dedicated\u003cbr /\u003e\ncharacters for these, such as \u0026frac12; (\u0026amp;#189;) and \u0026frac14; (\u0026amp;#188;). This can help make\u003cbr /\u003e\nthe text more readable.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://en.wikipedia.org/wiki/Number_Forms\"\u003ehttp://en.wikipedia.org/wiki/Number_Forms\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TypographyOther",
    "name": "Other typographical problems",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check looks for miscellaneous typographical problems and offers\u003cbr /\u003e\nreplacement sequences that will make the text easier to read and your\u003cbr /\u003e\napplication more polished.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\nUsability:Icons\u003cbr /\u003e\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "TypographyQuotes",
    "name": "Straight quotes can be replaced with curvy quotes",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable TypographyQuotes\u003cbr /\u003e\n\u003cbr /\u003e\nStraight single quotes and double quotes, when used as a pair, can be replaced\u003cbr /\u003e\nby \u0026quot;curvy quotes\u0026quot; (or directional quotes). This can make the text more\u003cbr /\u003e\nreadable.\u003cbr /\u003e\n\u003cbr /\u003e\nNote that you should never use grave accents and apostrophes to quote, `like\u003cbr /\u003e\nthis\u0027.\u003cbr /\u003e\n\u003cbr /\u003e\n(Also note that you should not use curvy quotes for code fragments.)\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://en.wikipedia.org/wiki/Quotation_mark\"\u003ehttp://en.wikipedia.org/wiki/Quotation_mark\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Typos",
    "name": "Spelling error",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check looks through the string definitions, and if it finds any words\u003cbr /\u003e\nthat look like likely misspellings, they are flagged.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UniqueConstants",
    "name": "Overlapping Enumeration Constants",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The @IntDef annotation allows you to create a light-weight \u0026quot;enum\u0026quot; or type\u003cbr /\u003e\ndefinition. However, it\u0027s possible to accidentally specify the same value for\u003cbr /\u003e\ntwo or more of the values, which can lead to hard-to-detect bugs. This check\u003cbr /\u003e\nlooks for this scenario and flags any repeated constants.\u003cbr /\u003e\n\u003cbr /\u003e\nIn some cases, the repeated constant is intentional (for example, renaming a\u003cbr /\u003e\nconstant to a more intuitive name, and leaving the old name in place for\u003cbr /\u003e\ncompatibility purposes.)  In that case, simply suppress this check by adding a\u003cbr /\u003e\n@SuppressLint(\u0026quot;UniqueConstants\u0026quot;) annotation.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UniquePermission",
    "name": "Permission names are not unique",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "The unqualified names or your permissions must be unique. The reason for this\u003cbr /\u003e\nis that at build time, the aapt tool will generate a class named Manifest\u003cbr /\u003e\nwhich contains a field for each of your permissions. These fields are named\u003cbr /\u003e\nusing your permission unqualified names (i.e. the name portion after the last\u003cbr /\u003e\ndot).\u003cbr /\u003e\n\u003cbr /\u003e\nIf more than one permission maps to the same field name, that field will\u003cbr /\u003e\narbitrarily name just one of them.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnknownId",
    "name": "Reference to an unknown id",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "The @+id/ syntax refers to an existing id, or creates a new one if it has not\u003cbr /\u003e\nalready been defined elsewhere. However, this means that if you have a typo in\u003cbr /\u003e\nyour reference, or if the referred view no longer exists, you do not get a\u003cbr /\u003e\nwarning since the id will be created on demand. This check catches errors\u003cbr /\u003e\nwhere you have renamed an id without updating all of the references to it.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnknownIdInLayout",
    "name": "Reference to an id that is not in the current layout",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The @+id/ syntax refers to an existing id, or creates a new one if it has not\u003cbr /\u003e\nalready been defined elsewhere. However, this means that if you have a typo in\u003cbr /\u003e\nyour reference, or if the referred view no longer exists, you do not get a\u003cbr /\u003e\nwarning since the id will be created on demand.\u003cbr /\u003e\n\u003cbr /\u003e\nThis is sometimes intentional, for example where you are referring to a view\u003cbr /\u003e\nwhich is provided in a different layout via an include. However, it is usually\u003cbr /\u003e\nan accident where you have a typo or you have renamed a view without updating\u003cbr /\u003e\nall the references to it.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnlocalizedSms",
    "name": "SMS phone number missing country code",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "SMS destination numbers must start with a country code or the application code\u003cbr /\u003e\nmust ensure that the SMS is only sent when the user is in the same country as\u003cbr /\u003e\nthe receiver.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnpackedNativeCode",
    "name": "Missing android:extractNativeLibs\u003dfalse",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable UnpackedNativeCode\u003cbr /\u003e\n\u003cbr /\u003e\nThis app loads native libraries using System.loadLibrary().\u003cbr /\u003e\n\u003cbr /\u003e\nConsider adding android:extractNativeLibs\u003d\u0026quot;false\u0026quot; to the \u0026lt;application\u0026gt; tag in\u003cbr /\u003e\nAndroidManifest.xml. Starting with Android 6.0, this will make installation\u003cbr /\u003e\nfaster, the app will take up less space on the device and updates will have\u003cbr /\u003e\nsmaller download sizes.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnprotectedSMSBroadcastReceiver",
    "name": "Unprotected SMS BroadcastReceiver",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "BroadcastReceivers that declare an intent-filter for SMS_DELIVER or\u003cbr /\u003e\nSMS_RECEIVED must ensure that the caller has the BROADCAST_SMS permission,\u003cbr /\u003e\notherwise it is possible for malicious actors to spoof intents.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnsafeDynamicallyLoadedCode",
    "name": "load used to dynamically load code",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Dynamically loading code from locations other than the application\u0027s library\u003cbr /\u003e\ndirectory or the Android platform\u0027s built-in library directories is dangerous,\u003cbr /\u003e\nas there is an increased risk that the code could have been tampered with.\u003cbr /\u003e\nApplications should use loadLibrary when possible, which provides increased\u003cbr /\u003e\nassurance that libraries are loaded from one of these safer locations.\u003cbr /\u003e\nApplication developers should use the features of their development\u003cbr /\u003e\nenvironment to place application native libraries into the lib directory of\u003cbr /\u003e\ntheir compiled APKs.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnsafeNativeCodeLocation",
    "name": "Native code outside library directory",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "In general, application native code should only be placed in the application\u0027s\u003cbr /\u003e\nlibrary directory, not in other locations such as the res or assets\u003cbr /\u003e\ndirectories. Placing the code in the library directory provides increased\u003cbr /\u003e\nassurance that the code will not be tampered with after application\u003cbr /\u003e\ninstallation. Application developers should use the features of their\u003cbr /\u003e\ndevelopment environment to place application native libraries into the lib\u003cbr /\u003e\ndirectory of their compiled APKs. Embedding non-shared library native\u003cbr /\u003e\nexecutables into applications should be avoided when possible.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnsafeProtectedBroadcastReceiver",
    "name": "Unsafe Protected BroadcastReceiver",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "BroadcastReceivers that declare an intent-filter for a protected-broadcast\u003cbr /\u003e\naction string must check that the received intent\u0027s action string matches the\u003cbr /\u003e\nexpected value, otherwise it is possible for malicious actors to spoof\u003cbr /\u003e\nintents.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnsupportedChromeOsHardware",
    "name": "Unsupported Chrome OS Hardware Feature",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable UnsupportedChromeOsHardware\u003cbr /\u003e\n\u003cbr /\u003e\nThe \u0026lt;uses-feature\u0026gt; element should not require this unsupported Chrome OS\u003cbr /\u003e\nhardware feature. Any uses-feature not explicitly marked with required\u003d\u0026quot;false\u0026quot;\u003cbr /\u003e\nis necessary on the device to be installed on. Ensure that any features that\u003cbr /\u003e\nmight prevent it from being installed on a Chrome OS device are reviewed and\u003cbr /\u003e\nmarked as not required in the manifest.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/topic/arc/manifest.html#incompat-entries\"\u003ehttps://developer.android.com/topic/arc/manifest.html#incompat-entries\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnsupportedTvHardware",
    "name": "Unsupported TV Hardware Feature",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "The \u0026lt;uses-feature\u0026gt; element should not require this unsupported TV hardware\u003cbr /\u003e\nfeature. Any uses-feature not explicitly marked with required\u003d\u0026quot;false\u0026quot; is\u003cbr /\u003e\nnecessary on the device to be installed on. Ensure that any features that\u003cbr /\u003e\nmight prevent it from being installed on a TV device are reviewed and marked\u003cbr /\u003e\nas not required in the manifest.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/tv/start/hardware.html#unsupported-features\"\u003ehttps://developer.android.com/training/tv/start/hardware.html#unsupported-features\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnusedAttribute",
    "name": "Attribute unused on older versions",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "This check finds attributes set in XML files that were introduced in a version\u003cbr /\u003e\nnewer than the oldest version targeted by your application (with the\u003cbr /\u003e\nminSdkVersion attribute).\u003cbr /\u003e\n\u003cbr /\u003e\nThis is not an error; the application will simply ignore the attribute.\u003cbr /\u003e\nHowever, if the attribute is important to the appearance or functionality of\u003cbr /\u003e\nyour application, you should consider finding an alternative way to achieve\u003cbr /\u003e\nthe same result with only available attributes, and then you can optionally\u003cbr /\u003e\ncreate a copy of the layout in a layout-vNN folder which will be used on API\u003cbr /\u003e\nNN or higher where you can take advantage of the newer attribute.\u003cbr /\u003e\n\u003cbr /\u003e\nNote: This check does not only apply to attributes. For example, some tags can\u003cbr /\u003e\nbe unused too, such as the new \u0026lt;tag\u0026gt; element in layouts introduced in API 21.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnusedIds",
    "name": "Unused id",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable UnusedIds\u003cbr /\u003e\n\u003cbr /\u003e\nThis resource id definition appears not to be needed since it is not\u003cbr /\u003e\nreferenced from anywhere. Having id definitions, even if unused, is not\u003cbr /\u003e\nnecessarily a bad idea since they make working on layouts and menus easier, so\u003cbr /\u003e\nthere is not a strong reason to delete these.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnusedNamespace",
    "name": "Unused namespace",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Unused namespace declarations take up space and require processing that is not\u003cbr /\u003e\nnecessary\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\nUsability:Typography\u003cbr /\u003e\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnusedQuantity",
    "name": "Unused quantity translations",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Android defines a number of different quantity strings, such as zero, one, few\u003cbr /\u003e\nand many. However, many languages do not distinguish grammatically between all\u003cbr /\u003e\nthese different quantities.\u003cbr /\u003e\n\u003cbr /\u003e\nThis lint check looks at the quantity strings defined for each translation and\u003cbr /\u003e\nflags any quantity strings that are unused (because the language does not make\u003cbr /\u003e\nthat quantity distinction, and Android will therefore not look it up.).\u003cbr /\u003e\n\u003cbr /\u003e\nFor example, in Chinese, only the other quantity is used, so even if you\u003cbr /\u003e\nprovide translations for zero and one, these strings will not be returned when\u003cbr /\u003e\ngetQuantityString() is called, even with 0 or 1.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/resources/string-resource.html#Plurals\"\u003ehttp://developer.android.com/guide/topics/resources/string-resource.html#Plurals\u003c/a\u003e\u003cbr /\u003e\n\u003cbr /\u003e\nCorrectness:Chrome OS\u003cbr /\u003e\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UnusedResources",
    "name": "Unused resources",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Unused resources make applications larger and slow down builds.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UseAlpha2",
    "name": "Using 3-letter Codes",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "For compatibility with earlier devices, you should only use 3-letter language\u003cbr /\u003e\nand region codes when there is no corresponding 2 letter code.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://tools.ietf.org/html/bcp47\"\u003ehttps://tools.ietf.org/html/bcp47\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UseCheckPermission",
    "name": "Using the result of check permission calls",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "You normally want to use the result of checking a permission; these methods\u003cbr /\u003e\nreturn whether the permission is held; they do not throw an error if the\u003cbr /\u003e\npermission is not granted. Code which does not do anything with the return\u003cbr /\u003e\nvalue probably meant to be calling the enforce methods instead, e.g. rather\u003cbr /\u003e\nthan Context#checkCallingPermission it should call\u003cbr /\u003e\nContext#enforceCallingPermission.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UseCompoundDrawables",
    "name": "Node can be replaced by a TextView with compound drawables",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A LinearLayout which contains an ImageView and a TextView can be more\u003cbr /\u003e\nefficiently handled as a compound drawable (a single TextView, using the\u003cbr /\u003e\ndrawableTop, drawableLeft, drawableRight and/or drawableBottom attributes to\u003cbr /\u003e\ndraw one or more images adjacent to the text).\u003cbr /\u003e\n\u003cbr /\u003e\nIf the two widgets are offset from each other with margins, this can be\u003cbr /\u003e\nreplaced with a drawablePadding attribute.\u003cbr /\u003e\n\u003cbr /\u003e\nThere\u0027s a lint quickfix to perform this conversion in the Eclipse plugin.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UseOfBundledGooglePlayServices",
    "name": "Use of bundled version of Google Play services",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Google Play services SDK\u0027s can be selectively included, which enables a\u003cbr /\u003e\nsmaller APK size. Consider declaring dependencies on individual Google Play\u003cbr /\u003e\nservices SDK\u0027s. If you are using Firebase API\u0027s\u003cbr /\u003e\n(http://firebase.google.com/docs/android/setup), Android Studio\u0027s Tools \u0026rarr;\u003cbr /\u003e\nFirebase assistant window can automatically add just the dependencies needed\u003cbr /\u003e\nfor each feature.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developers.google.com/android/guides/setup#split\"\u003ehttp://developers.google.com/android/guides/setup#split\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UseSparseArrays",
    "name": "HashMap can be replaced with SparseArray",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "For maps where the keys are of type integer, it\u0027s typically more efficient to\u003cbr /\u003e\nuse the Android SparseArray API. This check identifies scenarios where you\u003cbr /\u003e\nmight want to consider using SparseArray instead of HashMap for better\u003cbr /\u003e\nperformance.\u003cbr /\u003e\n\u003cbr /\u003e\nThis is particularly useful when the value types are primitives like ints,\u003cbr /\u003e\nwhere you can use SparseIntArray and avoid auto-boxing the values from int to\u003cbr /\u003e\nInteger.\u003cbr /\u003e\n\u003cbr /\u003e\nIf you need to construct a HashMap because you need to call an API outside of\u003cbr /\u003e\nyour control which requires a Map, you can suppress this warning using for\u003cbr /\u003e\nexample the @SuppressLint annotation.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UseValueOf",
    "name": "Should use valueOf instead of new",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "You should not call the constructor for wrapper classes directly, such as`new\u003cbr /\u003e\nInteger(42)`. Instead, call the valueOf factory method, such as\u003cbr /\u003e\nInteger.valueOf(42). This will typically use less memory because common\u003cbr /\u003e\nintegers such as 0 and 1 will share a single instance.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UselessLeaf",
    "name": "Useless leaf layout",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A layout that has no children or no background can often be removed (since it\u003cbr /\u003e\nis invisible) for a flatter and more efficient layout hierarchy.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UselessParent",
    "name": "Useless parent layout",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "A layout with children that has no siblings, is not a scrollview or a root\u003cbr /\u003e\nlayout, and does not have a background, can be removed and have its children\u003cbr /\u003e\nmoved directly into the parent for a flatter and more efficient layout\u003cbr /\u003e\nhierarchy.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UsesMinSdkAttributes",
    "name": "Minimum SDK and target SDK attributes not defined",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The manifest should contain a \u0026lt;uses-sdk\u0026gt; element which defines the minimum API\u003cbr /\u003e\nLevel required for the application to run, as well as the target version (the\u003cbr /\u003e\nhighest API level you have tested the version for.)\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/manifest/uses-sdk-element.html\"\u003ehttp://developer.android.com/guide/topics/manifest/uses-sdk-element.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "UsingHttp",
    "name": "Using HTTP instead of HTTPS",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The Gradle Wrapper is available both via HTTP and HTTPS. HTTPS is more secure\u003cbr /\u003e\nsince it protects against man-in-the-middle attacks etc. Older projects\u003cbr /\u003e\ncreated in Android Studio used HTTP but we now default to HTTPS and recommend\u003cbr /\u003e\nupgrading existing projects.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ValidFragment",
    "name": "Fragment not instantiatable",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "From the Fragment documentation:\u003cbr /\u003e\nEvery fragment must have an empty constructor, so it can be instantiated when\u003cbr /\u003e\nrestoring its activity\u0027s state. It is strongly recommended that subclasses do\u003cbr /\u003e\nnot have other constructors with parameters, since these constructors will not\u003cbr /\u003e\nbe called when the fragment is re-instantiated; instead, arguments can be\u003cbr /\u003e\nsupplied by the caller with setArguments(Bundle) and later retrieved by the\u003cbr /\u003e\nFragment with getArguments().\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/reference/android/app/Fragment.html#Fragment()\"\u003ehttp://developer.android.com/reference/android/app/Fragment.html#Fragment()\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ValidRestrictions",
    "name": "Invalid Restrictions Descriptor",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Ensures that an applications restrictions XML file is properly formed\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/reference/android/content/RestrictionsManager.html\"\u003ehttps://developer.android.com/reference/android/content/RestrictionsManager.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "VectorDrawableCompat",
    "name": "Using VectorDrawableCompat",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "To use VectorDrawableCompat, you need to make two modifications to your\u003cbr /\u003e\nproject. First, set android.defaultConfig.vectorDrawables.useSupportLibrary \u003d\u003cbr /\u003e\ntrue in your build.gradle file, and second, use app:srcCompat instead of\u003cbr /\u003e\nandroid:src to refer to vector drawables.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://chris.banes.me/2016/02/25/appcompat-vector/#enabling-the-flag\"\u003ehttp://chris.banes.me/2016/02/25/appcompat-vector/#enabling-the-flag\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "VectorPath",
    "name": "Long vector paths",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Using long vector paths is bad for performance. There are several ways to make\u003cbr /\u003e\nthe pathData shorter:\u003cbr /\u003e\n* Using less precision\u003cbr /\u003e\n* Removing some minor details\u003cbr /\u003e\n* Using the Android Studio vector conversion tool\u003cbr /\u003e\n* Rasterizing the image (converting to PNG)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "VectorRaster",
    "name": "Vector Image Generation",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Vector icons require API 21, but when using Android Gradle plugin 1.4 or\u003cbr /\u003e\nhigher, vectors placed in the drawable folder are automatically moved to\u003cbr /\u003e\ndrawable-*dpi-v21 and a bitmap image is generated each drawable-*dpi folder\u003cbr /\u003e\ninstead, for backwards compatibility (provided minSdkVersion is less than\u003cbr /\u003e\n21.).\u003cbr /\u003e\n\u003cbr /\u003e\nHowever, there are some limitations to this vector image generation, and this\u003cbr /\u003e\nlint check flags elements and attributes that are not fully supported. You\u003cbr /\u003e\nshould manually check whether the generated output is acceptable for those\u003cbr /\u003e\nolder devices.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ViewConstructor",
    "name": "Missing View constructors for XML inflation",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Some layout tools (such as the Android layout editor) need to find a\u003cbr /\u003e\nconstructor with one of the following signatures:\u003cbr /\u003e\n* View(Context context)\u003cbr /\u003e\n* View(Context context, AttributeSet attrs)\u003cbr /\u003e\n* View(Context context, AttributeSet attrs, int defStyle)\u003cbr /\u003e\n\u003cbr /\u003e\nIf your custom view needs to perform initialization which does not apply when\u003cbr /\u003e\nused in a layout editor, you can surround the given code with a check to see\u003cbr /\u003e\nif View#isInEditMode() is false, since that method will return false at\u003cbr /\u003e\nruntime but true within a user interface editor.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ViewHolder",
    "name": "View Holder Candidates",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "When implementing a view Adapter, you should avoid unconditionally inflating a\u003cbr /\u003e\nnew layout; if an available item is passed in for reuse, you should try to use\u003cbr /\u003e\nthat one instead. This helps make for example ListView scrolling much\u003cbr /\u003e\nsmoother.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder\"\u003ehttp://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "ViewTag",
    "name": "Tagged object leaks",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Prior to Android 4.0, the implementation of View.setTag(int, Object) would\u003cbr /\u003e\nstore the objects in a static map, where the values were strongly referenced.\u003cbr /\u003e\nThis means that if the object contains any references pointing back to the\u003cbr /\u003e\ncontext, the context (which points to pretty much everything else) will leak.\u003cbr /\u003e\nIf you pass a view, the view provides a reference to the context that created\u003cbr /\u003e\nit. Similarly, view holders typically contain a view, and cursors are\u003cbr /\u003e\nsometimes also associated with views.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "VisibleForTests",
    "name": "Visible Only For Tests",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "With the @VisibleForTesting annotation you can specify an otherwise\u003d attribute\u003cbr /\u003e\nwhich specifies the intended visibility if the method had not been made more\u003cbr /\u003e\nwidely visible for the tests.\u003cbr /\u003e\n\u003cbr /\u003e\nThis check looks for accesses from production code (e.g. not tests) where the\u003cbr /\u003e\naccess would not have been allowed with the intended production visibility.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "VulnerableCordovaVersion",
    "name": "Vulnerable Cordova Version",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "The version of Cordova used in the app is vulnerable to security issues.\u003cbr /\u003e\nPlease update to the latest Apache Cordova version.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://cordova.apache.org/announcements/2015/11/20/security.html\"\u003ehttps://cordova.apache.org/announcements/2015/11/20/security.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "Wakelock",
    "name": "Incorrect WakeLock usage",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Failing to release a wakelock properly can keep the Android device in a high\u003cbr /\u003e\npower mode, which reduces battery life. There are several causes of this, such\u003cbr /\u003e\nas releasing the wake lock in onDestroy() instead of in onPause(), failing to\u003cbr /\u003e\ncall release() in all possible code paths after an acquire(), and so on.\u003cbr /\u003e\n\u003cbr /\u003e\nNOTE: If you are using the lock just to keep the screen on, you should\u003cbr /\u003e\nstrongly consider using FLAG_KEEP_SCREEN_ON instead. This window flag will be\u003cbr /\u003e\ncorrectly managed by the platform as the user moves between applications and\u003cbr /\u003e\ndoesn\u0027t require a special permission. See\u003cbr /\u003e\nhttp://developer.android.com/reference/android/view/WindowManager.LayoutParams\u003cbr /\u003e\n.html#FLAG_KEEP_SCREEN_ON.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WakelockTimeout",
    "name": "Using wakeLock without timeout",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Wakelocks have two acquire methods: one with a timeout, and one without. You\u003cbr /\u003e\nshould generally always use the one with a timeout. A typical timeout is 10\u003cbr /\u003e\nminutes. If the task takes longer than it is critical that it happens (i.e.\u003cbr /\u003e\ncan\u0027t use JobScheduler) then maybe they should consider a foreground service\u003cbr /\u003e\ninstead (which is a stronger run guarantee and lets the user know something\u003cbr /\u003e\nlong/important is happening.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WearStandaloneAppFlag",
    "name": "Invalid or missing Wear standalone app flag",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Wearable apps should specify whether they can work standalone, without a phone\u003cbr /\u003e\napp.Add a valid meta-data entry for com.google.android.wearable.standalone to\u003cbr /\u003e\nyour application element and set the value to true or false.\u003cbr /\u003e\n\u0026lt;meta-data android:name\u003d\u0026quot;com.google.android.wearable.standalone\u0026quot;\u003cbr /\u003e\n            android:value\u003d\u0026quot;true\u0026quot;/\u0026gt;\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"https://developer.android.com/training/wearables/apps/packaging.html\"\u003ehttps://developer.android.com/training/wearables/apps/packaging.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WearableBindListener",
    "name": "Usage of Android Wear BIND_LISTENER is deprecated",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "BIND_LISTENER receives all Android Wear events whether the application needs\u003cbr /\u003e\nthem or not. This can be inefficient and cause applications to wake up\u003cbr /\u003e\nunnecessarily. With Google Play Services 8.2.0 or later it is recommended to\u003cbr /\u003e\nuse a more efficient combination of manifest listeners and api-based live\u003cbr /\u003e\nlisteners filtered by action, path and/or path prefix.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://android-developers.blogspot.com/2016/04/deprecation-of-bindlistener.html\"\u003ehttp://android-developers.blogspot.com/2016/04/deprecation-of-bindlistener.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "performance",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WebViewLayout",
    "name": "WebViews in wrap_content parents",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "The WebView implementation has certain performance optimizations which will\u003cbr /\u003e\nnot work correctly if the parent view is using wrap_content rather than\u003cbr /\u003e\nmatch_parent. This can lead to subtle UI bugs.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WebpUnsupported",
    "name": "WebP Unsupported",
    "type": "CODE_SMELL",
    "severity": "MAJOR",
    "description": "The WebP format requires Android 4.0 (API 15). Certain features, such as\u003cbr /\u003e\nlossless encoding and transparency, requires Android 4.2.1 (API 18; API 17 is\u003cbr /\u003e\n4.2.0.)\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android",
      "user-experience"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WifiManagerLeak",
    "name": "WifiManager Leak",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "On versions prior to Android N (24), initializing the WifiManager via\u003cbr /\u003e\nContext#getSystemService can cause a memory leak if the context is not the\u003cbr /\u003e\napplication context. Change context.getSystemService(...) to\u003cbr /\u003e\ncontext.getApplicationContext().getSystemService(...).\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WifiManagerPotentialLeak",
    "name": "WifiManager Potential Leak",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "On versions prior to Android N (24), initializing the WifiManager via\u003cbr /\u003e\nContext#getSystemService can cause a memory leak if the context is not the\u003cbr /\u003e\napplication context.\u003cbr /\u003e\n\u003cbr /\u003e\nIn many cases, it\u0027s not obvious from the code where the Context is coming from\u003cbr /\u003e\n(e.g. it might be a parameter to a method, or a field initialized from various\u003cbr /\u003e\nmethod calls.)  It\u0027s possible that the context being passed in is the\u003cbr /\u003e\napplication context, but to be on the safe side, you should consider changing\u003cbr /\u003e\ncontext.getSystemService(...) to\u003cbr /\u003e\ncontext.getApplicationContext().getSystemService(...).\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WorldReadableFiles",
    "name": "openFileOutput() or similar call passing MODE_WORLD_READABLE",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "There are cases where it is appropriate for an application to write world\u003cbr /\u003e\nreadable files, but these should be reviewed carefully to ensure that they\u003cbr /\u003e\ncontain no private data that is leaked to other applications.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WorldWriteableFiles",
    "name": "openFileOutput() or similar call passing MODE_WORLD_WRITEABLE",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "There are cases where it is appropriate for an application to write world\u003cbr /\u003e\nwriteable files, but these should be reviewed carefully to ensure that they\u003cbr /\u003e\ncontain no private data, and that if the file is modified by a malicious\u003cbr /\u003e\napplication it does not trick or compromise your application.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WrongCall",
    "name": "Using wrong draw/layout method",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Custom views typically need to call measure() on their children, not\u003cbr /\u003e\nonMeasure. Ditto for onDraw, onLayout, etc.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WrongCase",
    "name": "Wrong case for view tag",
    "type": "CODE_SMELL",
    "severity": "CRITICAL",
    "description": "Most layout tags, such as \u0026lt;Button\u0026gt;, refer to actual view classes and are\u003cbr /\u003e\ntherefore capitalized. However, there are exceptions such as \u0026lt;fragment\u0026gt; and\u003cbr /\u003e\n\u0026lt;include\u0026gt;. This lint check looks for incorrect capitalizations.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/components/fragments.html\"\u003ehttp://developer.android.com/guide/components/fragments.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WrongConstant",
    "name": "Incorrect constant",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Ensures that when parameter in a method only allows a specific set of\u003cbr /\u003e\nconstants, calls obey those rules.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "security",
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WrongFolder",
    "name": "Resource file in the wrong res folder",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Resource files are sometimes placed in the wrong folder, and it can lead to\u003cbr /\u003e\nsubtle bugs that are hard to understand. This check looks for problems in this\u003cbr /\u003e\narea, such as attempting to place a layout \u0026quot;alias\u0026quot; file in a layout/ folder\u003cbr /\u003e\nrather than the values/ folder where it belongs.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WrongManifestParent",
    "name": "Wrong manifest parent",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "The \u0026lt;uses-library\u0026gt; element should be defined as a direct child of the\u003cbr /\u003e\n\u0026lt;application\u0026gt; tag, not the \u0026lt;manifest\u0026gt; tag or an \u0026lt;activity\u0026gt; tag. Similarly, a\u003cbr /\u003e\n\u0026lt;uses-sdk\u0026gt; tag must be declared at the root level, and so on. This check looks\u003cbr /\u003e\nfor incorrect declaration locations in the manifest, and complains if an\u003cbr /\u003e\nelement is found in the wrong place.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/topics/manifest/manifest-intro.html\"\u003ehttp://developer.android.com/guide/topics/manifest/manifest-intro.html\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WrongRegion",
    "name": "Suspicious Language/Region Combination",
    "type": "CODE_SMELL",
    "severity": "MINOR",
    "description": "Android uses the letter codes ISO 639-1 for languages, and the letter codes\u003cbr /\u003e\nISO 3166-1 for the region codes. In many cases, the language code and the\u003cbr /\u003e\ncountry where the language is spoken is the same, but it is also often not the\u003cbr /\u003e\ncase. For example, while \u0027se\u0027 refers to Sweden, where Swedish is spoken, the\u003cbr /\u003e\nlanguage code for Swedish is not se (which refers to the Northern Sami\u003cbr /\u003e\nlanguage), the language code is sv. And similarly the region code for sv is El\u003cbr /\u003e\nSalvador.\u003cbr /\u003e\n\u003cbr /\u003e\nThis lint check looks for suspicious language and region combinations, to help\u003cbr /\u003e\ncatch cases where you\u0027ve accidentally used the wrong language or region code.\u003cbr /\u003e\nLint knows about the most common regions where a language is spoken, and if a\u003cbr /\u003e\nfolder combination is not one of these, it is flagged as suspicious.\u003cbr /\u003e\n\u003cbr /\u003e\nNote however that it may not be an error: you can theoretically have speakers\u003cbr /\u003e\nof any language in any region and want to target that with your resources, so\u003cbr /\u003e\nthis check is aimed at tracking down likely mistakes, not to enforce a\u003cbr /\u003e\nspecific set of region and language combinations.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WrongThread",
    "name": "Wrong Thread",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "Ensures that a method which expects to be called on a specific thread, is\u003cbr /\u003e\nactually called from that thread. For example, calls on methods in widgets\u003cbr /\u003e\nshould always be made on the UI thread.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/components/processes-and-threads.html#Threads\"\u003ehttp://developer.android.com/guide/components/processes-and-threads.html#Threads\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WrongThreadInterprocedural",
    "name": "Wrong Thread (Interprocedural)",
    "type": "BUG",
    "severity": "MAJOR",
    "description": "NOTE: This issue is disabled by default!\u003cbr /\u003e\nYou can enable it by adding --enable WrongThreadInterprocedural\u003cbr /\u003e\n\u003cbr /\u003e\nSearches for interprocedural call paths that violate thread annotations in the\u003cbr /\u003e\nprogram. Tracks the flow of instantiated types and lambda expressions to\u003cbr /\u003e\nincrease accuracy across method boundaries.\u003cbr /\u003e\n\u003cbr /\u003e\nMore information: \u003cbr /\u003e\n\u003ca href\u003d\"http://developer.android.com/guide/components/processes-and-threads.html#Threads\"\u003ehttp://developer.android.com/guide/components/processes-and-threads.html#Threads\u003c/a\u003e\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  },
  {
    "key": "WrongViewCast",
    "name": "Mismatched view type",
    "type": "BUG",
    "severity": "CRITICAL",
    "description": "Keeps track of the view types associated with ids and if it finds a usage of\u003cbr /\u003e\nthe id in the Java code it ensures that it is treated as the same type.\u003cbr /\u003e\n\u003cbr /\u003e\n",
    "tags": [
      "android"
    ],
    "constantDebtMinutes": 5
  }
]

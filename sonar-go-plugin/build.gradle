plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

// require sonar-go-to-slang binaries to be build
shadowJar.dependsOn ':sonar-go-to-slang:build'
test.dependsOn ':sonar-go-to-slang:build'

dependencies {
    implementation project(':slang-api')
    implementation project(':slang-checks')
    implementation project(':slang-plugin')
    implementation project(':checkstyle-import')
    // dependency on sonar-go-to-slang binaries
    runtimeOnly files(project(':sonar-go-to-slang').buildDir)
    compileOnly 'org.sonarsource.sonarqube:sonar-plugin-api'
    testImplementation 'org.sonarsource.sonarqube:sonar-plugin-api-impl'
    implementation 'org.sonarsource.analyzer-commons:sonar-analyzer-commons'
    implementation 'com.eclipsesource.minimal-json:minimal-json'
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-migrationsupport"
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.github.classgraph:classgraph'
    testImplementation project(':slang-antlr')
    testImplementation project(':slang-testing')
    testImplementation 'org.awaitility:awaitility:3.1.0'
}

tasks.withType(JavaCompile) {
    // Prevent warning: Gradle 5.0 will ignore annotation processors
    options.compilerArgs += [ "-proc:none" ]
}

test {
    testLogging {
        exceptionFormat 'full' // log the full stack trace (default is the 1st line of the stack trace)
        events "skipped", "failed" // verbose log for failed and skipped tests (by default the name of the tests are not logged)
    }
}

jar {
    manifest {
        def displayVersion = (project.buildNumber == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.buildNumber})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'org.sonar.go.plugin.GoPlugin',
                'Plugin-Description': 'Code Analyzer for Go',
                'Plugin-Developers': 'SonarSource Team',
                'Plugin-Display-Version': displayVersion,
                'Plugin-Homepage': 'http://redirect.sonarsource.com/plugins/go.html',
                'Plugin-IssueTrackerUrl': 'https://jira.sonarsource.com/browse/SONARSLANG',
                'Plugin-Key': 'go',
                'Plugin-License': 'GNU LGPL 3',
                'Plugin-Name': 'Go Code Quality and Security',
                'Plugin-Organization': 'SonarSource',
                'Plugin-OrganizationUrl': 'http://www.sonarsource.com',
                'Plugin-SourcesUrl': 'https://github.com/SonarSource/slang',
                'Plugin-Version': project.version,
                'Sonar-Version': '6.7',
                'SonarLint-Supported': 'true',
                'Version': "${project.version}",
        )
    }
}

shadowJar {
    minimize { }
    dependencies {
        exclude(dependency('org.sonarsource.sonarqube:sonar-plugin-api'))
        exclude(dependency('org.codehaus.woodstox:.*'))
        exclude(dependency('org.codehaus.staxmate:.*'))
        exclude(dependency('com.google.code.findbugs:jsr305'))

        exclude 'libs/**'
        exclude 'META-INF/maven/**'
        exclude 'tmp/**'
    }
    doLast {
        enforceJarSizeAndCheckContent(shadowJar.archiveFile.get().asFile, 6_000_000L, 6_350_000L)
    }
}

artifacts {
    archives shadowJar
}

artifactoryPublish.skip = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: shadowJar, classifier: null
            artifact sourcesJar
            artifact javadocJar
        }
    }
}
